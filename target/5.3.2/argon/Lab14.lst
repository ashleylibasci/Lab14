
/Users/ashleylibasci/IoTFolderLabs/Lab14/target/5.3.2/argon/Lab14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b74c0  000b74c0  000074c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003e540  000b74e4  0000e540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000240  2003e5b0  2003e5b0  0001e5b0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b7554  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b7558  000b7558  00017558  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b755e  000b755e  0001755e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7582  000b7582  00017582  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00127e76  00000000  00000000  00017586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00014901  00000000  00000000  0013f3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00041322  00000000  00000000  00153cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ea8  00000000  00000000  0019501f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000aa08  00000000  00000000  00197ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f216  00000000  00000000  001a28cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004af60  00000000  00000000  001e1ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013cf91  00000000  00000000  0022ca45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008708  00000000  00000000  003699d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fadd 	bl	b65fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f002 fae5 	bl	b6618 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e540 	.word	0x2003e540
   b4058:	000b74e4 	.word	0x000b74e4
   b405c:	2003e5b0 	.word	0x2003e5b0
   b4060:	2003e5b0 	.word	0x2003e5b0
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f002 f991 	bl	b6394 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b749c 	.word	0x000b749c
   b408c:	000b74c0 	.word	0x000b74c0

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b84e 	b.w	b4130 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f877 	bl	b4188 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f002 b931 	b.w	b6304 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f001 bc4b 	b.w	b593c <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f001 bc51 	b.w	b594c <free>
	...

000b40ac <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40ae:	4a03      	ldr	r2, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x10>)
   b40b0:	4903      	ldr	r1, [pc, #12]	; (b40c0 <__cxa_pure_virtual+0x14>)
   b40b2:	200c      	movs	r0, #12
   b40b4:	f001 fba6 	bl	b5804 <panic_>
  while (1);
   b40b8:	e7fe      	b.n	b40b8 <__cxa_pure_virtual+0xc>
   b40ba:	bf00      	nop
   b40bc:	000b5545 	.word	0x000b5545
   b40c0:	000b6764 	.word	0x000b6764

000b40c4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c4:	7800      	ldrb	r0, [r0, #0]
   b40c6:	fab0 f080 	clz	r0, r0
   b40ca:	0940      	lsrs	r0, r0, #5
   b40cc:	4770      	bx	lr

000b40ce <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ce:	2301      	movs	r3, #1
   b40d0:	7003      	strb	r3, [r0, #0]
   b40d2:	4770      	bx	lr

000b40d4 <_Z16incrementCounterv>:
volatile bool buttonPressed = false;
volatile bool interruptsEnabled = true;

void incrementCounter()
{
  if (interruptsEnabled)
   b40d4:	4b05      	ldr	r3, [pc, #20]	; (b40ec <_Z16incrementCounterv+0x18>)
   b40d6:	781b      	ldrb	r3, [r3, #0]
   b40d8:	b133      	cbz	r3, b40e8 <_Z16incrementCounterv+0x14>
  {
    counter++;
   b40da:	4a05      	ldr	r2, [pc, #20]	; (b40f0 <_Z16incrementCounterv+0x1c>)
   b40dc:	6813      	ldr	r3, [r2, #0]
   b40de:	3301      	adds	r3, #1
   b40e0:	6013      	str	r3, [r2, #0]
    buttonPressed = true;
   b40e2:	4b04      	ldr	r3, [pc, #16]	; (b40f4 <_Z16incrementCounterv+0x20>)
   b40e4:	2201      	movs	r2, #1
   b40e6:	701a      	strb	r2, [r3, #0]
  }
}
   b40e8:	4770      	bx	lr
   b40ea:	bf00      	nop
   b40ec:	2003e540 	.word	0x2003e540
   b40f0:	2003e5b4 	.word	0x2003e5b4
   b40f4:	2003e5b0 	.word	0x2003e5b0

000b40f8 <_Z21toggleInterruptsStatev>:

void toggleInterruptsState()
{
   b40f8:	b513      	push	{r0, r1, r4, lr}
  if (interruptsEnabled)
   b40fa:	4c0b      	ldr	r4, [pc, #44]	; (b4128 <_Z21toggleInterruptsStatev+0x30>)
   b40fc:	7823      	ldrb	r3, [r4, #0]
   b40fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4102:	b133      	cbz	r3, b4112 <_Z21toggleInterruptsStatev+0x1a>
  {
    detachInterrupt(yellowCounter);
   b4104:	2006      	movs	r0, #6
   b4106:	f001 fd21 	bl	b5b4c <_Z15detachInterruptt>
    interruptsEnabled = false;
   b410a:	2300      	movs	r3, #0
  }
  else
  {
    attachInterrupt(yellowCounter, incrementCounter, FALLING);
    interruptsEnabled = true;
   b410c:	7023      	strb	r3, [r4, #0]
  }
}
   b410e:	b002      	add	sp, #8
   b4110:	bd10      	pop	{r4, pc}
    attachInterrupt(yellowCounter, incrementCounter, FALLING);
   b4112:	9200      	str	r2, [sp, #0]
   b4114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4118:	4904      	ldr	r1, [pc, #16]	; (b412c <_Z21toggleInterruptsStatev+0x34>)
   b411a:	2202      	movs	r2, #2
   b411c:	2006      	movs	r0, #6
   b411e:	f001 fceb 	bl	b5af8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    interruptsEnabled = true;
   b4122:	2301      	movs	r3, #1
   b4124:	e7f2      	b.n	b410c <_Z21toggleInterruptsStatev+0x14>
   b4126:	bf00      	nop
   b4128:	2003e540 	.word	0x2003e540
   b412c:	000b40d5 	.word	0x000b40d5

000b4130 <setup>:

void setup()
{
   b4130:	b513      	push	{r0, r1, r4, lr}
  display.setup();
   b4132:	4812      	ldr	r0, [pc, #72]	; (b417c <setup+0x4c>)
   b4134:	f001 f9a4 	bl	b5480 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b4138:	4810      	ldr	r0, [pc, #64]	; (b417c <setup+0x4c>)
   b413a:	f000 fdff 	bl	b4d3c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b413e:	480f      	ldr	r0, [pc, #60]	; (b417c <setup+0x4c>)
   b4140:	f001 f86a 	bl	b5218 <_ZN16Adafruit_SSD13067displayEv>

  pinMode(yellowCounter, INPUT_PULLUP);
   b4144:	2102      	movs	r1, #2
   b4146:	2006      	movs	r0, #6
   b4148:	f002 f994 	bl	b6474 <pinMode>
  pinMode(greenInterrupt, INPUT_PULLUP);

  attachInterrupt(yellowCounter, incrementCounter, FALLING);
   b414c:	2400      	movs	r4, #0
  pinMode(greenInterrupt, INPUT_PULLUP);
   b414e:	2102      	movs	r1, #2
   b4150:	2007      	movs	r0, #7
   b4152:	f002 f98f 	bl	b6474 <pinMode>
  attachInterrupt(yellowCounter, incrementCounter, FALLING);
   b4156:	490a      	ldr	r1, [pc, #40]	; (b4180 <setup+0x50>)
   b4158:	9400      	str	r4, [sp, #0]
   b415a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b415e:	2202      	movs	r2, #2
   b4160:	2006      	movs	r0, #6
   b4162:	f001 fcc9 	bl	b5af8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(greenInterrupt, toggleInterruptsState, FALLING);
   b4166:	4907      	ldr	r1, [pc, #28]	; (b4184 <setup+0x54>)
   b4168:	9400      	str	r4, [sp, #0]
   b416a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b416e:	2202      	movs	r2, #2
   b4170:	2007      	movs	r0, #7
   b4172:	f001 fcc1 	bl	b5af8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b4176:	b002      	add	sp, #8
   b4178:	bd10      	pop	{r4, pc}
   b417a:	bf00      	nop
   b417c:	2003e5b8 	.word	0x2003e5b8
   b4180:	000b40d5 	.word	0x000b40d5
   b4184:	000b40f9 	.word	0x000b40f9

000b4188 <loop>:

void loop()
{
   b4188:	b570      	push	{r4, r5, r6, lr}
  display.loop();
   b418a:	4d17      	ldr	r5, [pc, #92]	; (b41e8 <loop+0x60>)

  if (buttonPressed)
   b418c:	4e17      	ldr	r6, [pc, #92]	; (b41ec <loop+0x64>)
  display.loop();
   b418e:	4628      	mov	r0, r5
   b4190:	f001 f99f 	bl	b54d2 <_ZN16OledWingAdafruit4loopEv>
  if (buttonPressed)
   b4194:	7833      	ldrb	r3, [r6, #0]
   b4196:	b333      	cbz	r3, b41e6 <loop+0x5e>
  {
    delay(100);
   b4198:	2064      	movs	r0, #100	; 0x64
   b419a:	f001 fbf7 	bl	b598c <delay>
    buttonPressed = false;
   b419e:	2400      	movs	r4, #0

    display.clearDisplay();
   b41a0:	4628      	mov	r0, r5
    buttonPressed = false;
   b41a2:	7034      	strb	r4, [r6, #0]
    display.clearDisplay();
   b41a4:	f000 fdca 	bl	b4d3c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   b41a8:	2101      	movs	r1, #1
   b41aa:	4628      	mov	r0, r5
   b41ac:	f000 fc0d 	bl	b49ca <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b41b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b41b4:	616b      	str	r3, [r5, #20]
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println(counter);
   b41b6:	4b0e      	ldr	r3, [pc, #56]	; (b41f0 <loop+0x68>)
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b41b8:	612c      	str	r4, [r5, #16]
   b41ba:	681c      	ldr	r4, [r3, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b41bc:	2c00      	cmp	r4, #0
   b41be:	da10      	bge.n	b41e2 <loop+0x5a>
            t = print('-');
   b41c0:	212d      	movs	r1, #45	; 0x2d
   b41c2:	4628      	mov	r0, r5
   b41c4:	f001 fe3a 	bl	b5e3c <_ZN5Print5printEc>
            val = -n;
   b41c8:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41ca:	220a      	movs	r2, #10
   b41cc:	4806      	ldr	r0, [pc, #24]	; (b41e8 <loop+0x60>)
   b41ce:	f001 fe44 	bl	b5e5a <_ZN5Print11printNumberEmh>
        n += println();
   b41d2:	4805      	ldr	r0, [pc, #20]	; (b41e8 <loop+0x60>)
   b41d4:	f001 fe35 	bl	b5e42 <_ZN5Print7printlnEv>
    display.display();
  }
   b41d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    display.display();
   b41dc:	4802      	ldr	r0, [pc, #8]	; (b41e8 <loop+0x60>)
   b41de:	f001 b81b 	b.w	b5218 <_ZN16Adafruit_SSD13067displayEv>
            val = n;
   b41e2:	4621      	mov	r1, r4
   b41e4:	e7f1      	b.n	b41ca <loop+0x42>
   b41e6:	bd70      	pop	{r4, r5, r6, pc}
   b41e8:	2003e5b8 	.word	0x2003e5b8
   b41ec:	2003e5b0 	.word	0x2003e5b0
   b41f0:	2003e5b4 	.word	0x2003e5b4

000b41f4 <_GLOBAL__sub_I_display>:
   b41f4:	b508      	push	{r3, lr}
SYSTEM_THREAD(ENABLED);
   b41f6:	2100      	movs	r1, #0
   b41f8:	2001      	movs	r0, #1
   b41fa:	f001 fb1b 	bl	b5834 <system_thread_set_state>
   b41fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
OledWingAdafruit display;
   b4202:	4802      	ldr	r0, [pc, #8]	; (b420c <_GLOBAL__sub_I_display+0x18>)
   b4204:	2107      	movs	r1, #7
   b4206:	f001 b90d 	b.w	b5424 <_ZN16OledWingAdafruitC1Ei>
   b420a:	bf00      	nop
   b420c:	2003e5b8 	.word	0x2003e5b8

000b4210 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4214:	b085      	sub	sp, #20
   b4216:	461f      	mov	r7, r3
   b4218:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b421c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4220:	eba8 0902 	sub.w	r9, r8, r2
   b4224:	eba7 0a01 	sub.w	sl, r7, r1
   b4228:	f1b9 0f00 	cmp.w	r9, #0
   b422c:	bfb8      	it	lt
   b422e:	f1c9 0900 	rsblt	r9, r9, #0
   b4232:	f1ba 0f00 	cmp.w	sl, #0
   b4236:	bfb8      	it	lt
   b4238:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b423c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b423e:	4683      	mov	fp, r0
   b4240:	460c      	mov	r4, r1
   b4242:	4615      	mov	r5, r2
    if (steep) {
   b4244:	dd04      	ble.n	b4250 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4246:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4248:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b424a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b424c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b424e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4250:	42bc      	cmp	r4, r7
   b4252:	dd05      	ble.n	b4260 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4254:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4256:	4645      	mov	r5, r8
   b4258:	4690      	mov	r8, r2
    if (x0 > x1) {
   b425a:	4622      	mov	r2, r4
   b425c:	463c      	mov	r4, r7
   b425e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4260:	1b3e      	subs	r6, r7, r4
   b4262:	b2b2      	uxth	r2, r6
   b4264:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4266:	eba8 0205 	sub.w	r2, r8, r5
   b426a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b426e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4272:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4276:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b427a:	4545      	cmp	r5, r8
   b427c:	bfb4      	ite	lt
   b427e:	2201      	movlt	r2, #1
   b4280:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4284:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4286:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4288:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b428a:	42bc      	cmp	r4, r7
   b428c:	dc1c      	bgt.n	b42c8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b428e:	f8db 2000 	ldr.w	r2, [fp]
   b4292:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4294:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4296:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b429a:	bfc7      	ittee	gt
   b429c:	4629      	movgt	r1, r5
   b429e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b42a0:	462a      	movle	r2, r5
   b42a2:	4621      	movle	r1, r4
   b42a4:	4658      	mov	r0, fp
   b42a6:	47c0      	blx	r8
        }
        err -= dy;
   b42a8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b42aa:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b42ac:	1ab6      	subs	r6, r6, r2
   b42ae:	b2b1      	uxth	r1, r6
   b42b0:	b236      	sxth	r6, r6
        if (err < 0) {
   b42b2:	2e00      	cmp	r6, #0
   b42b4:	da05      	bge.n	b42c2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b42b6:	9a02      	ldr	r2, [sp, #8]
   b42b8:	4415      	add	r5, r2
            err += dx;
   b42ba:	9a00      	ldr	r2, [sp, #0]
   b42bc:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b42be:	b22d      	sxth	r5, r5
            err += dx;
   b42c0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b42c2:	3401      	adds	r4, #1
   b42c4:	b224      	sxth	r4, r4
   b42c6:	e7e0      	b.n	b428a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b42c8:	b005      	add	sp, #20
   b42ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b42ce <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b42ce:	4770      	bx	lr

000b42d0 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b42d0:	b410      	push	{r4}
    drawPixel(x, y, color);
   b42d2:	6804      	ldr	r4, [r0, #0]
   b42d4:	6924      	ldr	r4, [r4, #16]
   b42d6:	46a4      	mov	ip, r4
}
   b42d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b42dc:	4760      	bx	ip

000b42de <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b42de:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b42e0:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b42e2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b42e6:	9502      	str	r5, [sp, #8]
   b42e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b42ea:	46a4      	mov	ip, r4
}
   b42ec:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b42ee:	4760      	bx	ip

000b42f0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b42f0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b42f2:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b42f4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b42f8:	9502      	str	r5, [sp, #8]
   b42fa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b42fc:	46a4      	mov	ip, r4
}
   b42fe:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4300:	4760      	bx	ip

000b4302 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4302:	b470      	push	{r4, r5, r6}
   b4304:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4308:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b430c:	6804      	ldr	r4, [r0, #0]
   b430e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4312:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4314:	46a4      	mov	ip, r4
}
   b4316:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4318:	4760      	bx	ip

000b431a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b431a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b431e:	461c      	mov	r4, r3
    startWrite();
   b4320:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4322:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4326:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4328:	4605      	mov	r5, r0
   b432a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b432c:	3c01      	subs	r4, #1
   b432e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4330:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4332:	b224      	sxth	r4, r4
    startWrite();
   b4334:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4336:	682b      	ldr	r3, [r5, #0]
   b4338:	f8cd 8004 	str.w	r8, [sp, #4]
   b433c:	9400      	str	r4, [sp, #0]
   b433e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4340:	4628      	mov	r0, r5
   b4342:	463b      	mov	r3, r7
   b4344:	4632      	mov	r2, r6
   b4346:	4639      	mov	r1, r7
   b4348:	47a0      	blx	r4
    endWrite();
   b434a:	682b      	ldr	r3, [r5, #0]
   b434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b434e:	4628      	mov	r0, r5
}
   b4350:	b002      	add	sp, #8
   b4352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4356:	4718      	bx	r3

000b4358 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4358:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b435c:	461d      	mov	r5, r3
    startWrite();
   b435e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4360:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4364:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4366:	4604      	mov	r4, r0
   b4368:	4617      	mov	r7, r2
   b436a:	460e      	mov	r6, r1
    startWrite();
   b436c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b436e:	e9cd 7800 	strd	r7, r8, [sp]
   b4372:	6822      	ldr	r2, [r4, #0]
   b4374:	1e6b      	subs	r3, r5, #1
   b4376:	4433      	add	r3, r6
   b4378:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b437a:	4620      	mov	r0, r4
   b437c:	b21b      	sxth	r3, r3
   b437e:	463a      	mov	r2, r7
   b4380:	4631      	mov	r1, r6
   b4382:	47a8      	blx	r5
    endWrite();
   b4384:	6823      	ldr	r3, [r4, #0]
   b4386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4388:	4620      	mov	r0, r4
}
   b438a:	b002      	add	sp, #8
   b438c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4390:	4718      	bx	r3

000b4392 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4392:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4396:	461e      	mov	r6, r3
    startWrite();
   b4398:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b439a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b439e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b43a0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b43a4:	460c      	mov	r4, r1
   b43a6:	4605      	mov	r5, r0
   b43a8:	4617      	mov	r7, r2
    startWrite();
   b43aa:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b43ac:	4426      	add	r6, r4
   b43ae:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b43b0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b43b2:	da0b      	bge.n	b43cc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b43b4:	f8cd 8000 	str.w	r8, [sp]
   b43b8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b43bc:	4621      	mov	r1, r4
   b43be:	464b      	mov	r3, r9
   b43c0:	463a      	mov	r2, r7
   b43c2:	4628      	mov	r0, r5
   b43c4:	3401      	adds	r4, #1
   b43c6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b43c8:	b224      	sxth	r4, r4
   b43ca:	e7f0      	b.n	b43ae <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b43cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b43ce:	4628      	mov	r0, r5
}
   b43d0:	b002      	add	sp, #8
   b43d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b43d6:	4718      	bx	r3

000b43d8 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b43d8:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b43da:	6802      	ldr	r2, [r0, #0]
   b43dc:	9101      	str	r1, [sp, #4]
   b43de:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b43e2:	9100      	str	r1, [sp, #0]
   b43e4:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b43e6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b43ea:	2200      	movs	r2, #0
   b43ec:	4611      	mov	r1, r2
   b43ee:	47a0      	blx	r4
}
   b43f0:	b002      	add	sp, #8
   b43f2:	bd10      	pop	{r4, pc}

000b43f4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b43f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b43f8:	4299      	cmp	r1, r3
        uint16_t color) {
   b43fa:	4616      	mov	r6, r2
   b43fc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4400:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4404:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4406:	4680      	mov	r8, r0
   b4408:	460d      	mov	r5, r1
   b440a:	461c      	mov	r4, r3
    if(x0 == x1){
   b440c:	d113      	bne.n	b4436 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b440e:	42be      	cmp	r6, r7
   b4410:	bfc8      	it	gt
   b4412:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4414:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4418:	bfc4      	itt	gt
   b441a:	463e      	movgt	r6, r7
   b441c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b441e:	1c7b      	adds	r3, r7, #1
   b4420:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4422:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4424:	b21b      	sxth	r3, r3
   b4426:	4632      	mov	r2, r6
   b4428:	4629      	mov	r1, r5
   b442a:	4640      	mov	r0, r8
   b442c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b442e:	b003      	add	sp, #12
   b4430:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4434:	4760      	bx	ip
    } else if(y0 == y1){
   b4436:	42be      	cmp	r6, r7
   b4438:	d10a      	bne.n	b4450 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b443a:	4299      	cmp	r1, r3
   b443c:	bfc2      	ittt	gt
   b443e:	460b      	movgt	r3, r1
   b4440:	4625      	movgt	r5, r4
   b4442:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4444:	1c63      	adds	r3, r4, #1
   b4446:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b444a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b444c:	1b5b      	subs	r3, r3, r5
   b444e:	e7e9      	b.n	b4424 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4450:	6953      	ldr	r3, [r2, #20]
   b4452:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4454:	e9cd 7900 	strd	r7, r9, [sp]
   b4458:	f8d8 3000 	ldr.w	r3, [r8]
   b445c:	4640      	mov	r0, r8
   b445e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4460:	4632      	mov	r2, r6
   b4462:	4623      	mov	r3, r4
   b4464:	4629      	mov	r1, r5
   b4466:	47b8      	blx	r7
        endWrite();
   b4468:	f8d8 3000 	ldr.w	r3, [r8]
   b446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b446e:	4640      	mov	r0, r8
}
   b4470:	b003      	add	sp, #12
   b4472:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4476:	4718      	bx	r3

000b4478 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4478:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b447c:	461d      	mov	r5, r3
    startWrite();
   b447e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4480:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4484:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4486:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b448a:	4604      	mov	r4, r0
   b448c:	460f      	mov	r7, r1
   b448e:	4616      	mov	r6, r2
    startWrite();
   b4490:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4492:	6823      	ldr	r3, [r4, #0]
   b4494:	f8cd 8000 	str.w	r8, [sp]
   b4498:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b449c:	4632      	mov	r2, r6
   b449e:	462b      	mov	r3, r5
   b44a0:	4639      	mov	r1, r7
   b44a2:	4620      	mov	r0, r4
   b44a4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b44a6:	6823      	ldr	r3, [r4, #0]
   b44a8:	f8cd 8000 	str.w	r8, [sp]
   b44ac:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b44b0:	4432      	add	r2, r6
   b44b2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b44b6:	4639      	mov	r1, r7
   b44b8:	462b      	mov	r3, r5
   b44ba:	4620      	mov	r0, r4
   b44bc:	b212      	sxth	r2, r2
   b44be:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b44c0:	6823      	ldr	r3, [r4, #0]
   b44c2:	f8cd 8000 	str.w	r8, [sp]
   b44c6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b44ca:	4632      	mov	r2, r6
   b44cc:	464b      	mov	r3, r9
   b44ce:	4639      	mov	r1, r7
   b44d0:	4620      	mov	r0, r4
   b44d2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b44d4:	1e6b      	subs	r3, r5, #1
   b44d6:	19d9      	adds	r1, r3, r7
   b44d8:	6823      	ldr	r3, [r4, #0]
   b44da:	f8cd 8000 	str.w	r8, [sp]
   b44de:	6a1d      	ldr	r5, [r3, #32]
   b44e0:	4620      	mov	r0, r4
   b44e2:	464b      	mov	r3, r9
   b44e4:	4632      	mov	r2, r6
   b44e6:	b209      	sxth	r1, r1
   b44e8:	47a8      	blx	r5
    endWrite();
   b44ea:	6823      	ldr	r3, [r4, #0]
   b44ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44ee:	4620      	mov	r0, r4
}
   b44f0:	b002      	add	sp, #8
   b44f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b44f6:	4718      	bx	r3

000b44f8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b44f8:	4770      	bx	lr

000b44fa <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b44fa:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b44fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4502:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4504:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4506:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b450a:	bf59      	ittee	pl
   b450c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b450e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4510:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4512:	81c3      	strhmi	r3, [r0, #14]
}
   b4514:	4770      	bx	lr
	...

000b4518 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4518:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b451a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b451c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b451e:	4a07      	ldr	r2, [pc, #28]	; (b453c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4520:	4d07      	ldr	r5, [pc, #28]	; (b4540 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4522:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4524:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4526:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b452c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4530:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4532:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4534:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4536:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4538:	6204      	str	r4, [r0, #32]
}
   b453a:	bd30      	pop	{r4, r5, pc}
   b453c:	01000101 	.word	0x01000101
   b4540:	000b6c84 	.word	0x000b6c84

000b4544 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4548:	b089      	sub	sp, #36	; 0x24
   b454a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b454e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4550:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4554:	9304      	str	r3, [sp, #16]
   b4556:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b455a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b455c:	9305      	str	r3, [sp, #20]
   b455e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4562:	4604      	mov	r4, r0
    startWrite();
   b4564:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4566:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b456a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b456e:	bf48      	it	mi
   b4570:	f108 020e 	addmi.w	r2, r8, #14
   b4574:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b4578:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b457a:	4635      	mov	r5, r6
   b457c:	9b03      	ldr	r3, [sp, #12]
   b457e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4580:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4584:	189a      	adds	r2, r3, r2
   b4586:	9b05      	ldr	r3, [sp, #20]
   b4588:	428b      	cmp	r3, r1
   b458a:	b212      	sxth	r2, r2
   b458c:	dd27      	ble.n	b45de <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b458e:	9b04      	ldr	r3, [sp, #16]
   b4590:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4592:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4596:	9306      	str	r3, [sp, #24]
   b4598:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b459c:	4580      	cmp	r8, r0
   b459e:	fa1f f189 	uxth.w	r1, r9
   b45a2:	dd17      	ble.n	b45d4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b45a4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b45a6:	bf05      	ittet	eq
   b45a8:	9b06      	ldreq	r3, [sp, #24]
   b45aa:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b45ac:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b45ae:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b45b0:	bf18      	it	ne
   b45b2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b45b4:	062b      	lsls	r3, r5, #24
   b45b6:	d50a      	bpl.n	b45ce <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b45b8:	9b02      	ldr	r3, [sp, #8]
   b45ba:	6820      	ldr	r0, [r4, #0]
   b45bc:	9207      	str	r2, [sp, #28]
   b45be:	4419      	add	r1, r3
   b45c0:	6983      	ldr	r3, [r0, #24]
   b45c2:	b209      	sxth	r1, r1
   b45c4:	461f      	mov	r7, r3
   b45c6:	4620      	mov	r0, r4
   b45c8:	4653      	mov	r3, sl
   b45ca:	47b8      	blx	r7
   b45cc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b45ce:	f109 0901 	add.w	r9, r9, #1
   b45d2:	e7e1      	b.n	b4598 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b45d4:	9b01      	ldr	r3, [sp, #4]
   b45d6:	3301      	adds	r3, #1
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	445e      	add	r6, fp
   b45dc:	e7ce      	b.n	b457c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b45de:	6823      	ldr	r3, [r4, #0]
   b45e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45e2:	4620      	mov	r0, r4
}
   b45e4:	b009      	add	sp, #36	; 0x24
   b45e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b45ea:	4718      	bx	r3

000b45ec <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b45ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b45f0:	ed2d 8b02 	vpush	{d8}
   b45f4:	b091      	sub	sp, #68	; 0x44
   b45f6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b45f8:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b45fa:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b45fe:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4602:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4606:	9103      	str	r1, [sp, #12]
   b4608:	461f      	mov	r7, r3
   b460a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b460e:	9304      	str	r3, [sp, #16]
   b4610:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4612:	2a00      	cmp	r2, #0
   b4614:	f040 80c5 	bne.w	b47a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4618:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b461c:	428b      	cmp	r3, r1
   b461e:	f340 814c 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4622:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4626:	42b3      	cmp	r3, r6
   b4628:	f340 8147 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b462c:	2306      	movs	r3, #6
   b462e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4632:	2b00      	cmp	r3, #0
   b4634:	f340 8141 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b4638:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b463c:	2b00      	cmp	r3, #0
   b463e:	f340 813c 	ble.w	b48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4642:	7f03      	ldrb	r3, [r0, #28]
   b4644:	b91b      	cbnz	r3, b464e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b4646:	2faf      	cmp	r7, #175	; 0xaf
   b4648:	bf84      	itt	hi
   b464a:	3701      	addhi	r7, #1
   b464c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b464e:	f8db 3000 	ldr.w	r3, [fp]
   b4652:	4658      	mov	r0, fp
   b4654:	695b      	ldr	r3, [r3, #20]
   b4656:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4658:	2205      	movs	r2, #5
   b465a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b465c:	2200      	movs	r2, #0
   b465e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4660:	4a98      	ldr	r2, [pc, #608]	; (b48c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4662:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b4666:	18d3      	adds	r3, r2, r3
   b4668:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b466a:	b2b3      	uxth	r3, r6
   b466c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b466e:	9a05      	ldr	r2, [sp, #20]
   b4670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4672:	5c9b      	ldrb	r3, [r3, r2]
   b4674:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4676:	b2ab      	uxth	r3, r5
   b4678:	930b      	str	r3, [sp, #44]	; 0x2c
   b467a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b467e:	9308      	str	r3, [sp, #32]
   b4680:	9b03      	ldr	r3, [sp, #12]
   b4682:	fb02 f905 	mul.w	r9, r2, r5
   b4686:	fa19 f983 	uxtah	r9, r9, r3
   b468a:	fa0f f389 	sxth.w	r3, r9
   b468e:	ee08 3a10 	vmov	s16, r3
   b4692:	2308      	movs	r3, #8
   b4694:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4696:	9b03      	ldr	r3, [sp, #12]
   b4698:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b469c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b46a0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b46a4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b46a6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b46aa:	07d2      	lsls	r2, r2, #31
   b46ac:	d552      	bpl.n	b4754 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b46ae:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b46b0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b46b4:	d13e      	bne.n	b4734 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b46b6:	2c01      	cmp	r4, #1
   b46b8:	d13c      	bne.n	b4734 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b46ba:	699b      	ldr	r3, [r3, #24]
   b46bc:	9906      	ldr	r1, [sp, #24]
   b46be:	461f      	mov	r7, r3
   b46c0:	9b04      	ldr	r3, [sp, #16]
   b46c2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b46c4:	b212      	sxth	r2, r2
   b46c6:	4651      	mov	r1, sl
   b46c8:	4658      	mov	r0, fp
   b46ca:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b46cc:	f109 0301 	add.w	r3, r9, #1
   b46d0:	fa4f f983 	sxtb.w	r9, r3
   b46d4:	9b07      	ldr	r3, [sp, #28]
   b46d6:	085b      	lsrs	r3, r3, #1
   b46d8:	9307      	str	r3, [sp, #28]
   b46da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b46dc:	3b01      	subs	r3, #1
   b46de:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b46e2:	930a      	str	r3, [sp, #40]	; 0x28
   b46e4:	d1de      	bne.n	b46a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b46e6:	9f05      	ldr	r7, [sp, #20]
   b46e8:	3701      	adds	r7, #1
   b46ea:	b27b      	sxtb	r3, r7
   b46ec:	9305      	str	r3, [sp, #20]
   b46ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b46f0:	3b01      	subs	r3, #1
   b46f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b46f6:	9309      	str	r3, [sp, #36]	; 0x24
   b46f8:	d1b9      	bne.n	b466e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b46fa:	9b04      	ldr	r3, [sp, #16]
   b46fc:	4543      	cmp	r3, r8
   b46fe:	d00f      	beq.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4700:	2d01      	cmp	r5, #1
   b4702:	f8db 3000 	ldr.w	r3, [fp]
   b4706:	d13b      	bne.n	b4780 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4708:	2c01      	cmp	r4, #1
   b470a:	d139      	bne.n	b4780 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b470c:	9908      	ldr	r1, [sp, #32]
   b470e:	f8cd 8000 	str.w	r8, [sp]
   b4712:	3105      	adds	r1, #5
   b4714:	6a1c      	ldr	r4, [r3, #32]
   b4716:	4632      	mov	r2, r6
   b4718:	2308      	movs	r3, #8
   b471a:	b209      	sxth	r1, r1
   b471c:	4658      	mov	r0, fp
   b471e:	47a0      	blx	r4
        endWrite();
   b4720:	f8db 3000 	ldr.w	r3, [fp]
   b4724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4726:	4658      	mov	r0, fp
}
   b4728:	b011      	add	sp, #68	; 0x44
   b472a:	ecbd 8b02 	vpop	{d8}
   b472e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4732:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4734:	9906      	ldr	r1, [sp, #24]
   b4736:	fb14 f202 	smulbb	r2, r4, r2
   b473a:	440a      	add	r2, r1
   b473c:	9904      	ldr	r1, [sp, #16]
   b473e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4740:	9400      	str	r4, [sp, #0]
   b4742:	69db      	ldr	r3, [r3, #28]
   b4744:	ee18 1a10 	vmov	r1, s16
   b4748:	461f      	mov	r7, r3
   b474a:	b212      	sxth	r2, r2
   b474c:	462b      	mov	r3, r5
   b474e:	4658      	mov	r0, fp
   b4750:	47b8      	blx	r7
   b4752:	e7bb      	b.n	b46cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4754:	9a04      	ldr	r2, [sp, #16]
   b4756:	4542      	cmp	r2, r8
   b4758:	d0b8      	beq.n	b46cc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b475a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b475c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4760:	d107      	bne.n	b4772 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4762:	2c01      	cmp	r4, #1
   b4764:	d105      	bne.n	b4772 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4766:	699b      	ldr	r3, [r3, #24]
   b4768:	9906      	ldr	r1, [sp, #24]
   b476a:	461f      	mov	r7, r3
   b476c:	440a      	add	r2, r1
   b476e:	4643      	mov	r3, r8
   b4770:	e7a8      	b.n	b46c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4772:	9906      	ldr	r1, [sp, #24]
   b4774:	f8cd 8004 	str.w	r8, [sp, #4]
   b4778:	fb14 f202 	smulbb	r2, r4, r2
   b477c:	440a      	add	r2, r1
   b477e:	e7df      	b.n	b4740 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4782:	f8cd 8004 	str.w	r8, [sp, #4]
   b4786:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b478a:	9a08      	ldr	r2, [sp, #32]
   b478c:	00e4      	lsls	r4, r4, #3
   b478e:	440a      	add	r2, r1
   b4790:	4611      	mov	r1, r2
   b4792:	9400      	str	r4, [sp, #0]
   b4794:	69dc      	ldr	r4, [r3, #28]
   b4796:	4632      	mov	r2, r6
   b4798:	462b      	mov	r3, r5
   b479a:	b209      	sxth	r1, r1
   b479c:	4658      	mov	r0, fp
   b479e:	47a0      	blx	r4
        endWrite();
   b47a0:	e7be      	b.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b47a2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b47a4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b47a6:	6812      	ldr	r2, [r2, #0]
   b47a8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b47aa:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b47ac:	b2ff      	uxtb	r7, r7
   b47ae:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b47b2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b47b6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b47b8:	789a      	ldrb	r2, [r3, #2]
   b47ba:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b47bc:	78da      	ldrb	r2, [r3, #3]
   b47be:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b47c0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b47c2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b47c6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b47ca:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b47cc:	d801      	bhi.n	b47d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b47ce:	2c01      	cmp	r4, #1
   b47d0:	d957      	bls.n	b4882 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b47d2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b47d6:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b47d8:	fa0f f38a 	sxth.w	r3, sl
   b47dc:	9307      	str	r3, [sp, #28]
        startWrite();
   b47de:	f8db 3000 	ldr.w	r3, [fp]
   b47e2:	4658      	mov	r0, fp
   b47e4:	695b      	ldr	r3, [r3, #20]
   b47e6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47e8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b47ea:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b47ee:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47f0:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b47f4:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b47f6:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b47f8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b47fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b47fc:	429f      	cmp	r7, r3
   b47fe:	d28f      	bcs.n	b4720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4800:	9b07      	ldr	r3, [sp, #28]
   b4802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4804:	443b      	add	r3, r7
   b4806:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b480a:	2200      	movs	r2, #0
   b480c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b480e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4810:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4812:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4816:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b481a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b481e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4820:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4822:	9905      	ldr	r1, [sp, #20]
   b4824:	4291      	cmp	r1, r2
   b4826:	d241      	bcs.n	b48ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4828:	1c5a      	adds	r2, r3, #1
   b482a:	b2d2      	uxtb	r2, r2
   b482c:	075b      	lsls	r3, r3, #29
   b482e:	920d      	str	r2, [sp, #52]	; 0x34
   b4830:	d107      	bne.n	b4842 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4832:	9b06      	ldr	r3, [sp, #24]
   b4834:	9906      	ldr	r1, [sp, #24]
   b4836:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4838:	3301      	adds	r3, #1
   b483a:	b29b      	uxth	r3, r3
   b483c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4840:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4842:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4846:	d012      	beq.n	b486e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4848:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b484a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b484e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4852:	d11a      	bne.n	b488a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4854:	2c01      	cmp	r4, #1
   b4856:	d118      	bne.n	b488a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b485a:	699b      	ldr	r3, [r3, #24]
   b485c:	4411      	add	r1, r2
   b485e:	9a05      	ldr	r2, [sp, #20]
   b4860:	4411      	add	r1, r2
   b4862:	461e      	mov	r6, r3
   b4864:	4652      	mov	r2, sl
   b4866:	9b04      	ldr	r3, [sp, #16]
   b4868:	b209      	sxth	r1, r1
   b486a:	4658      	mov	r0, fp
   b486c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b486e:	9e05      	ldr	r6, [sp, #20]
   b4870:	3601      	adds	r6, #1
   b4872:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4874:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4878:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b487a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b487e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4880:	e7ce      	b.n	b4820 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4882:	2300      	movs	r3, #0
   b4884:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4888:	e7a9      	b.n	b47de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b488a:	9805      	ldr	r0, [sp, #20]
   b488c:	9a08      	ldr	r2, [sp, #32]
   b488e:	4402      	add	r2, r0
   b4890:	fb02 1105 	mla	r1, r2, r5, r1
   b4894:	9a04      	ldr	r2, [sp, #16]
   b4896:	e9cd 4200 	strd	r4, r2, [sp]
   b489a:	69db      	ldr	r3, [r3, #28]
   b489c:	ee18 2a10 	vmov	r2, s16
   b48a0:	461e      	mov	r6, r3
   b48a2:	b209      	sxth	r1, r1
   b48a4:	462b      	mov	r3, r5
   b48a6:	4658      	mov	r0, fp
   b48a8:	47b0      	blx	r6
   b48aa:	e7e0      	b.n	b486e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b48ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b48ae:	3701      	adds	r7, #1
   b48b0:	4498      	add	r8, r3
   b48b2:	fa5f f888 	uxtb.w	r8, r8
   b48b6:	b2ff      	uxtb	r7, r7
   b48b8:	e79f      	b.n	b47fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b48ba:	b011      	add	sp, #68	; 0x44
   b48bc:	ecbd 8b02 	vpop	{d8}
   b48c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b48c4:	000b6779 	.word	0x000b6779

000b48c8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b48c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b48ca:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b48cc:	b085      	sub	sp, #20
   b48ce:	4604      	mov	r4, r0
   b48d0:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b48d2:	2a00      	cmp	r2, #0
   b48d4:	d134      	bne.n	b4940 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b48d6:	290a      	cmp	r1, #10
   b48d8:	d108      	bne.n	b48ec <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b48da:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b48dc:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b48de:	7e42      	ldrb	r2, [r0, #25]
   b48e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b48e4:	8263      	strh	r3, [r4, #18]
}
   b48e6:	2001      	movs	r0, #1
   b48e8:	b005      	add	sp, #20
   b48ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b48ec:	290d      	cmp	r1, #13
   b48ee:	d0fa      	beq.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b48f0:	7ee1      	ldrb	r1, [r4, #27]
   b48f2:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b48f4:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b48f6:	b171      	cbz	r1, b4916 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b48f8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b48fc:	2106      	movs	r1, #6
   b48fe:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4902:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4906:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4908:	bfc1      	itttt	gt
   b490a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b490e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4910:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4914:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4916:	8ae2      	ldrh	r2, [r4, #22]
   b4918:	9201      	str	r2, [sp, #4]
   b491a:	8aa2      	ldrh	r2, [r4, #20]
   b491c:	9200      	str	r2, [sp, #0]
   b491e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4922:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4926:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b492a:	4620      	mov	r0, r4
   b492c:	f7ff fe5e 	bl	b45ec <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4930:	7e23      	ldrb	r3, [r4, #24]
   b4932:	8a22      	ldrh	r2, [r4, #16]
   b4934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4938:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b493c:	8223      	strh	r3, [r4, #16]
   b493e:	e7d2      	b.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4940:	290a      	cmp	r1, #10
   b4942:	d107      	bne.n	b4954 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4944:	2300      	movs	r3, #0
   b4946:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4948:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b494a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b494c:	8a43      	ldrh	r3, [r0, #18]
   b494e:	fb01 3302 	mla	r3, r1, r2, r3
   b4952:	e7c7      	b.n	b48e4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4954:	290d      	cmp	r1, #13
   b4956:	d0c6      	beq.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4958:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b495a:	42a9      	cmp	r1, r5
   b495c:	d3c3      	bcc.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b495e:	7a51      	ldrb	r1, [r2, #9]
   b4960:	4299      	cmp	r1, r3
   b4962:	d3c0      	bcc.n	b48e6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4964:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4966:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4968:	b2ed      	uxtb	r5, r5
   b496a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b496e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4970:	b328      	cbz	r0, b49be <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4972:	78e9      	ldrb	r1, [r5, #3]
   b4974:	b319      	cbz	r1, b49be <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4976:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4978:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b497a:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b497c:	b191      	cbz	r1, b49a4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b497e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4982:	4408      	add	r0, r1
   b4984:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4988:	fb06 1100 	mla	r1, r6, r0, r1
   b498c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4990:	4281      	cmp	r1, r0
   b4992:	dd07      	ble.n	b49a4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4994:	2000      	movs	r0, #0
   b4996:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4998:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b499c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b499e:	fb02 1207 	mla	r2, r2, r7, r1
   b49a2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b49a4:	8ae2      	ldrh	r2, [r4, #22]
   b49a6:	9201      	str	r2, [sp, #4]
   b49a8:	8aa2      	ldrh	r2, [r4, #20]
   b49aa:	9200      	str	r2, [sp, #0]
   b49ac:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b49b0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b49b4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b49b8:	4620      	mov	r0, r4
   b49ba:	f7ff fe17 	bl	b45ec <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b49be:	7929      	ldrb	r1, [r5, #4]
   b49c0:	7e22      	ldrb	r2, [r4, #24]
   b49c2:	8a23      	ldrh	r3, [r4, #16]
   b49c4:	fb01 3302 	mla	r3, r1, r2, r3
   b49c8:	e7b8      	b.n	b493c <_ZN12Adafruit_GFX5writeEh+0x74>

000b49ca <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b49ca:	2901      	cmp	r1, #1
   b49cc:	bf38      	it	cc
   b49ce:	2101      	movcc	r1, #1
   b49d0:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b49d2:	7641      	strb	r1, [r0, #25]
}
   b49d4:	4770      	bx	lr

000b49d6 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b49d6:	4770      	bx	lr

000b49d8 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b49d8:	b510      	push	{r4, lr}
  }
   b49da:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b49dc:	4604      	mov	r4, r0
  }
   b49de:	f7ff fb62 	bl	b40a6 <_ZdlPvj>
   b49e2:	4620      	mov	r0, r4
   b49e4:	bd10      	pop	{r4, pc}

000b49e6 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b49e6:	b40e      	push	{r1, r2, r3}
   b49e8:	b503      	push	{r0, r1, lr}
   b49ea:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b49ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b49ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b49f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b49f4:	f001 fa4f 	bl	b5e96 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b49f8:	b002      	add	sp, #8
   b49fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b49fe:	b003      	add	sp, #12
   b4a00:	4770      	bx	lr
	...

000b4a04 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4a06:	4604      	mov	r4, r0
   b4a08:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4a0a:	7922      	ldrb	r2, [r4, #4]
   b4a0c:	68a3      	ldr	r3, [r4, #8]
   b4a0e:	b132      	cbz	r2, b4a1e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4a10:	b9a3      	cbnz	r3, b4a3c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4a12:	490b      	ldr	r1, [pc, #44]	; (b4a40 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4a14:	b002      	add	sp, #8
   b4a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4a1a:	f001 ba0b 	b.w	b5e34 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4a1e:	4a09      	ldr	r2, [pc, #36]	; (b4a44 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4a20:	7b26      	ldrb	r6, [r4, #12]
   b4a22:	4d09      	ldr	r5, [pc, #36]	; (b4a48 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4a24:	4909      	ldr	r1, [pc, #36]	; (b4a4c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4a26:	7b64      	ldrb	r4, [r4, #13]
   b4a28:	2e01      	cmp	r6, #1
   b4a2a:	bf18      	it	ne
   b4a2c:	4629      	movne	r1, r5
   b4a2e:	e9cd 1400 	strd	r1, r4, [sp]
   b4a32:	4907      	ldr	r1, [pc, #28]	; (b4a50 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4a34:	f7ff ffd7 	bl	b49e6 <_ZN5Print6printfEPKcz>
  }
   b4a38:	b002      	add	sp, #8
   b4a3a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4a3c:	4a05      	ldr	r2, [pc, #20]	; (b4a54 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4a3e:	e7ef      	b.n	b4a20 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4a40:	000b6ce5 	.word	0x000b6ce5
   b4a44:	000b6cdc 	.word	0x000b6cdc
   b4a48:	000b6ce1 	.word	0x000b6ce1
   b4a4c:	000b6cdd 	.word	0x000b6cdd
   b4a50:	000b6cfb 	.word	0x000b6cfb
   b4a54:	000b6cd4 	.word	0x000b6cd4

000b4a58 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4a58:	b510      	push	{r4, lr}
   b4a5a:	4b04      	ldr	r3, [pc, #16]	; (b4a6c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4a5c:	6003      	str	r3, [r0, #0]
   b4a5e:	4604      	mov	r4, r0
  if(buffer) {
   b4a60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4a62:	b108      	cbz	r0, b4a68 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4a64:	f000 ff72 	bl	b594c <free>
    buffer = NULL;
  }
}
   b4a68:	4620      	mov	r0, r4
   b4a6a:	bd10      	pop	{r4, pc}
   b4a6c:	000b71d4 	.word	0x000b71d4

000b4a70 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4a70:	b510      	push	{r4, lr}
   b4a72:	4604      	mov	r4, r0
}
   b4a74:	f7ff fff0 	bl	b4a58 <_ZN16Adafruit_SSD1306D1Ev>
   b4a78:	4620      	mov	r0, r4
   b4a7a:	2150      	movs	r1, #80	; 0x50
   b4a7c:	f7ff fb13 	bl	b40a6 <_ZdlPvj>
   b4a80:	4620      	mov	r0, r4
   b4a82:	bd10      	pop	{r4, pc}

000b4a84 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a84:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4a86:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4a88:	db4b      	blt.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a8a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4a8e:	428c      	cmp	r4, r1
   b4a90:	dd47      	ble.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a92:	2a00      	cmp	r2, #0
   b4a94:	db45      	blt.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4a96:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4a9a:	4294      	cmp	r4, r2
   b4a9c:	dd41      	ble.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4a9e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4aa0:	2c02      	cmp	r4, #2
   b4aa2:	d01f      	beq.n	b4ae4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4aa4:	2c03      	cmp	r4, #3
   b4aa6:	d026      	beq.n	b4af6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4aa8:	2c01      	cmp	r4, #1
   b4aaa:	d104      	bne.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4aac:	8904      	ldrh	r4, [r0, #8]
   b4aae:	43d2      	mvns	r2, r2
   b4ab0:	4414      	add	r4, r2
      break;
   b4ab2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4ab4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4ab6:	2b01      	cmp	r3, #1
   b4ab8:	d023      	beq.n	b4b02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4aba:	2b02      	cmp	r3, #2
   b4abc:	d032      	beq.n	b4b24 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4abe:	bb83      	cbnz	r3, b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4ac0:	2a00      	cmp	r2, #0
   b4ac2:	4613      	mov	r3, r2
   b4ac4:	8904      	ldrh	r4, [r0, #8]
   b4ac6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4ac8:	bfb8      	it	lt
   b4aca:	1dd3      	addlt	r3, r2, #7
   b4acc:	10db      	asrs	r3, r3, #3
   b4ace:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4ad2:	f002 0207 	and.w	r2, r2, #7
   b4ad6:	2301      	movs	r3, #1
   b4ad8:	4093      	lsls	r3, r2
   b4ada:	5c42      	ldrb	r2, [r0, r1]
   b4adc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4ae0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4ae2:	e01e      	b.n	b4b22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4ae4:	8904      	ldrh	r4, [r0, #8]
   b4ae6:	3c01      	subs	r4, #1
   b4ae8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4aea:	8944      	ldrh	r4, [r0, #10]
   b4aec:	43d2      	mvns	r2, r2
   b4aee:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4af0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4af2:	b212      	sxth	r2, r2
      break;
   b4af4:	e7df      	b.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4af6:	8944      	ldrh	r4, [r0, #10]
   b4af8:	3c01      	subs	r4, #1
   b4afa:	1a64      	subs	r4, r4, r1
      break;
   b4afc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4afe:	b222      	sxth	r2, r4
      break;
   b4b00:	e7d9      	b.n	b4ab6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4b02:	2a00      	cmp	r2, #0
   b4b04:	8904      	ldrh	r4, [r0, #8]
   b4b06:	4613      	mov	r3, r2
   b4b08:	bfb8      	it	lt
   b4b0a:	1dd3      	addlt	r3, r2, #7
   b4b0c:	10db      	asrs	r3, r3, #3
   b4b0e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4b12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4b14:	f002 0007 	and.w	r0, r2, #7
   b4b18:	2201      	movs	r2, #1
   b4b1a:	4082      	lsls	r2, r0
   b4b1c:	5c58      	ldrb	r0, [r3, r1]
   b4b1e:	4302      	orrs	r2, r0
   b4b20:	545a      	strb	r2, [r3, r1]
}
   b4b22:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4b24:	2a00      	cmp	r2, #0
   b4b26:	4613      	mov	r3, r2
   b4b28:	8904      	ldrh	r4, [r0, #8]
   b4b2a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4b2c:	bfb8      	it	lt
   b4b2e:	1dd3      	addlt	r3, r2, #7
   b4b30:	10db      	asrs	r3, r3, #3
   b4b32:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4b36:	f002 0207 	and.w	r2, r2, #7
   b4b3a:	2301      	movs	r3, #1
   b4b3c:	fa03 f202 	lsl.w	r2, r3, r2
   b4b40:	5c43      	ldrb	r3, [r0, r1]
   b4b42:	405a      	eors	r2, r3
   b4b44:	e7cc      	b.n	b4ae0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4b48 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4b48:	b570      	push	{r4, r5, r6, lr}
   b4b4a:	4604      	mov	r4, r0
   b4b4c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4b4e:	2600      	movs	r6, #0
   b4b50:	f7ff fce2 	bl	b4518 <_ZN12Adafruit_GFXC1Ess>
   b4b54:	4b11      	ldr	r3, [pc, #68]	; (b4b9c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4b56:	6023      	str	r3, [r4, #0]
   b4b58:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4b5a:	b915      	cbnz	r5, b4b62 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4b5c:	f001 fce2 	bl	b6524 <_Z19__fetch_global_Wirev>
   b4b60:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4b62:	23ff      	movs	r3, #255	; 0xff
   b4b64:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4b68:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4b6c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4b70:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4b74:	4b0a      	ldr	r3, [pc, #40]	; (b4ba0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4b76:	63a3      	str	r3, [r4, #56]	; 0x38
   b4b78:	2301      	movs	r3, #1
   b4b7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4b7e:	9b05      	ldr	r3, [sp, #20]
   b4b80:	64a3      	str	r3, [r4, #72]	; 0x48
   b4b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4b86:	9b06      	ldr	r3, [sp, #24]
   b4b88:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4b8a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4b8e:	6426      	str	r6, [r4, #64]	; 0x40
   b4b90:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4b94:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4b96:	4620      	mov	r0, r4
   b4b98:	bd70      	pop	{r4, r5, r6, pc}
   b4b9a:	bf00      	nop
   b4b9c:	000b71d4 	.word	0x000b71d4
   b4ba0:	000b6d20 	.word	0x000b6d20

000b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ba6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4ba8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4baa:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4bac:	b190      	cbz	r0, b4bd4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4bae:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4bb2:	f000 ff95 	bl	b5ae0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4bb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4bb8:	6803      	ldr	r3, [r0, #0]
   b4bba:	2100      	movs	r1, #0
   b4bbc:	689b      	ldr	r3, [r3, #8]
   b4bbe:	4798      	blx	r3
    WIRE_WRITE(c);
   b4bc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4bc2:	6803      	ldr	r3, [r0, #0]
   b4bc4:	4629      	mov	r1, r5
   b4bc6:	689b      	ldr	r3, [r3, #8]
   b4bc8:	4798      	blx	r3
    wire->endTransmission();
   b4bca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4bd0:	f000 bf8d 	b.w	b5aee <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4bd4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4bd8:	4601      	mov	r1, r0
   b4bda:	b298      	uxth	r0, r3
   b4bdc:	f001 fc5b 	bl	b6496 <digitalWrite>
  if(spi) {
   b4be0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4be2:	b120      	cbz	r0, b4bee <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4be4:	4629      	mov	r1, r5
}
   b4be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4bea:	f001 ba37 	b.w	b605c <_ZN8SPIClass8transferEh>
   b4bee:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4bf0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4bf2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4bf6:	ea05 0107 	and.w	r1, r5, r7
   b4bfa:	b280      	uxth	r0, r0
   b4bfc:	f001 fc4b 	bl	b6496 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4c00:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c04:	2101      	movs	r1, #1
   b4c06:	b280      	uxth	r0, r0
   b4c08:	f001 fc45 	bl	b6496 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4c0c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4c10:	2100      	movs	r1, #0
   b4c12:	b280      	uxth	r0, r0
   b4c14:	f001 fc3f 	bl	b6496 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4c18:	3e01      	subs	r6, #1
   b4c1a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4c1e:	d1e8      	bne.n	b4bf2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c22 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4c22:	b538      	push	{r3, r4, r5, lr}
   b4c24:	4604      	mov	r4, r0
  TRANSACTION_START
   b4c26:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4c28:	460d      	mov	r5, r1
  TRANSACTION_START
   b4c2a:	b180      	cbz	r0, b4c4e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4c2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4c2e:	f000 ff49 	bl	b5ac4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4c32:	2d00      	cmp	r5, #0
   b4c34:	4620      	mov	r0, r4
   b4c36:	bf14      	ite	ne
   b4c38:	21a7      	movne	r1, #167	; 0xa7
   b4c3a:	21a6      	moveq	r1, #166	; 0xa6
   b4c3c:	f7ff ffb2 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4c40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c42:	b188      	cbz	r0, b4c68 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4c44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4c4a:	f000 bf3b 	b.w	b5ac4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4c50:	b118      	cbz	r0, b4c5a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4c52:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4c56:	f001 f993 	bl	b5f80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4c5a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4c5e:	2100      	movs	r1, #0
   b4c60:	b280      	uxth	r0, r0
   b4c62:	f001 fc18 	bl	b6496 <digitalWrite>
   b4c66:	e7e4      	b.n	b4c32 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4c68:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4c6c:	2101      	movs	r1, #1
   b4c6e:	b280      	uxth	r0, r0
   b4c70:	f001 fc11 	bl	b6496 <digitalWrite>
   b4c74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4c76:	b118      	cbz	r0, b4c80 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4c7c:	f001 b966 	b.w	b5f4c <_ZN8SPIClass14endTransactionEv>
}
   b4c80:	bd38      	pop	{r3, r4, r5, pc}

000b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4c86:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4c88:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4c8a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4c8c:	188f      	adds	r7, r1, r2
   b4c8e:	b340      	cbz	r0, b4ce2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4c90:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4c94:	f000 ff24 	bl	b5ae0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4c98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4c9a:	6803      	ldr	r3, [r0, #0]
   b4c9c:	2100      	movs	r1, #0
   b4c9e:	689b      	ldr	r3, [r3, #8]
   b4ca0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4ca2:	2601      	movs	r6, #1
    while(n--) {
   b4ca4:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4ca6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4ca8:	d017      	beq.n	b4cda <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4caa:	2e1f      	cmp	r6, #31
   b4cac:	d90c      	bls.n	b4cc8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4cae:	f000 ff1e 	bl	b5aee <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4cb2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4cb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cb8:	f000 ff12 	bl	b5ae0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4cbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cbe:	6803      	ldr	r3, [r0, #0]
   b4cc0:	2100      	movs	r1, #0
   b4cc2:	689b      	ldr	r3, [r3, #8]
   b4cc4:	4798      	blx	r3
        bytesOut = 1;
   b4cc6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4cc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4cca:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4cce:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4cd0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4cd2:	689b      	ldr	r3, [r3, #8]
   b4cd4:	4798      	blx	r3
      bytesOut++;
   b4cd6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4cd8:	e7e4      	b.n	b4ca4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4cda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4cde:	f000 bf06 	b.w	b5aee <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4ce2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4ce6:	4601      	mov	r1, r0
   b4ce8:	b298      	uxth	r0, r3
   b4cea:	f001 fbd4 	bl	b6496 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4cee:	42bd      	cmp	r5, r7
   b4cf0:	d022      	beq.n	b4d38 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4cf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4cf4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4cf8:	b118      	cbz	r0, b4d02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4cfa:	4649      	mov	r1, r9
   b4cfc:	f001 f9ae 	bl	b605c <_ZN8SPIClass8transferEh>
   b4d00:	e7f5      	b.n	b4cee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4d02:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d04:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4d08:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4d0c:	ea09 0108 	and.w	r1, r9, r8
   b4d10:	b280      	uxth	r0, r0
   b4d12:	f001 fbc0 	bl	b6496 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4d16:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d1a:	2101      	movs	r1, #1
   b4d1c:	b280      	uxth	r0, r0
   b4d1e:	f001 fbba 	bl	b6496 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4d22:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4d26:	2100      	movs	r1, #0
   b4d28:	b280      	uxth	r0, r0
   b4d2a:	f001 fbb4 	bl	b6496 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4d2e:	3e01      	subs	r6, #1
   b4d30:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4d34:	d1e8      	bne.n	b4d08 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4d36:	e7da      	b.n	b4cee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4d3c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4d3c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4d40:	1dda      	adds	r2, r3, #7
   b4d42:	bf48      	it	mi
   b4d44:	f103 020e 	addmi.w	r2, r3, #14
   b4d48:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4d4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4d4e:	10d2      	asrs	r2, r2, #3
   b4d50:	435a      	muls	r2, r3
   b4d52:	2100      	movs	r1, #0
   b4d54:	f001 bc60 	b.w	b6618 <memset>

000b4d58 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4d5c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4d60:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4d64:	4604      	mov	r4, r0
   b4d66:	460f      	mov	r7, r1
   b4d68:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d6a:	b1c3      	cbz	r3, b4d9e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4d6c:	4620      	mov	r0, r4
   b4d6e:	f7ff ffe5 	bl	b4d3c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4d72:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4d76:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b4d7a:	2820      	cmp	r0, #32
   b4d7c:	dc21      	bgt.n	b4dc2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4d7e:	2320      	movs	r3, #32
   b4d80:	2201      	movs	r2, #1
   b4d82:	3820      	subs	r0, #32
   b4d84:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4d88:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b4d8c:	2373      	movs	r3, #115	; 0x73
   b4d8e:	3973      	subs	r1, #115	; 0x73
   b4d90:	9300      	str	r3, [sp, #0]
   b4d92:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4d96:	4b89      	ldr	r3, [pc, #548]	; (b4fbc <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b4d98:	f340 024f 	sbfx	r2, r0, #1, #16
   b4d9c:	e021      	b.n	b4de2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4d9e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4da2:	1dd8      	adds	r0, r3, #7
   b4da4:	bf48      	it	mi
   b4da6:	f103 000e 	addmi.w	r0, r3, #14
   b4daa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4dae:	10c0      	asrs	r0, r0, #3
   b4db0:	4358      	muls	r0, r3
   b4db2:	f000 fdc3 	bl	b593c <malloc>
   b4db6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b4db8:	2800      	cmp	r0, #0
   b4dba:	d1d7      	bne.n	b4d6c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b4dbc:	b004      	add	sp, #16
   b4dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b4dc2:	3840      	subs	r0, #64	; 0x40
   b4dc4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b4dc8:	fa02 f280 	sxtah	r2, r2, r0
   b4dcc:	2340      	movs	r3, #64	; 0x40
   b4dce:	2001      	movs	r0, #1
   b4dd0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b4dd4:	2352      	movs	r3, #82	; 0x52
   b4dd6:	3952      	subs	r1, #82	; 0x52
   b4dd8:	9300      	str	r3, [sp, #0]
   b4dda:	4b79      	ldr	r3, [pc, #484]	; (b4fc0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b4ddc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b4de0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b4de2:	4620      	mov	r0, r4
   b4de4:	f341 014f 	sbfx	r1, r1, #1, #16
   b4de8:	f7ff fbac 	bl	b4544 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b4dec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b4dee:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b4df2:	2800      	cmp	r0, #0
   b4df4:	d078      	beq.n	b4ee8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4df6:	2d00      	cmp	r5, #0
   b4df8:	d174      	bne.n	b4ee4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b4dfa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b4dfe:	2b20      	cmp	r3, #32
   b4e00:	bf0c      	ite	eq
   b4e02:	253c      	moveq	r5, #60	; 0x3c
   b4e04:	253d      	movne	r5, #61	; 0x3d
   b4e06:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b4e0a:	f1b8 0f00 	cmp.w	r8, #0
   b4e0e:	d001      	beq.n	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4e10:	f000 fe5c 	bl	b5acc <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b4e14:	b1fe      	cbz	r6, b4e56 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b4e16:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e1a:	2800      	cmp	r0, #0
   b4e1c:	db1b      	blt.n	b4e56 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b4e1e:	2101      	movs	r1, #1
   b4e20:	b280      	uxth	r0, r0
   b4e22:	f001 fb27 	bl	b6474 <pinMode>
    digitalWrite(rstPin, HIGH);
   b4e26:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e2a:	2101      	movs	r1, #1
   b4e2c:	b280      	uxth	r0, r0
   b4e2e:	f001 fb32 	bl	b6496 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b4e32:	2001      	movs	r0, #1
   b4e34:	f000 fdaa 	bl	b598c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b4e38:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e3c:	2100      	movs	r1, #0
   b4e3e:	b280      	uxth	r0, r0
   b4e40:	f001 fb29 	bl	b6496 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b4e44:	200a      	movs	r0, #10
   b4e46:	f000 fda1 	bl	b598c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b4e4a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b4e4e:	2101      	movs	r1, #1
   b4e50:	b280      	uxth	r0, r0
   b4e52:	f001 fb20 	bl	b6496 <digitalWrite>
  TRANSACTION_START
   b4e56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e58:	2800      	cmp	r0, #0
   b4e5a:	d074      	beq.n	b4f46 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b4e5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4e5e:	f000 fe31 	bl	b5ac4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b4e62:	2204      	movs	r2, #4
   b4e64:	4957      	ldr	r1, [pc, #348]	; (b4fc4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b4e66:	4620      	mov	r0, r4
   b4e68:	f7ff ff0b 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b4e6c:	8961      	ldrh	r1, [r4, #10]
   b4e6e:	3901      	subs	r1, #1
   b4e70:	b2c9      	uxtb	r1, r1
   b4e72:	4620      	mov	r0, r4
   b4e74:	f7ff fe96 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b4e78:	4953      	ldr	r1, [pc, #332]	; (b4fc8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b4e7a:	2204      	movs	r2, #4
   b4e7c:	4620      	mov	r0, r4
   b4e7e:	f7ff ff00 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b4e82:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4e86:	2b01      	cmp	r3, #1
   b4e88:	bf0c      	ite	eq
   b4e8a:	2110      	moveq	r1, #16
   b4e8c:	2114      	movne	r1, #20
   b4e8e:	4620      	mov	r0, r4
   b4e90:	f7ff fe88 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b4e94:	2204      	movs	r2, #4
   b4e96:	494d      	ldr	r1, [pc, #308]	; (b4fcc <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b4e98:	4620      	mov	r0, r4
   b4e9a:	f7ff fef2 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b4e9e:	68a3      	ldr	r3, [r4, #8]
   b4ea0:	4a4b      	ldr	r2, [pc, #300]	; (b4fd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b4ea2:	4293      	cmp	r3, r2
   b4ea4:	d15c      	bne.n	b4f60 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b4ea6:	494b      	ldr	r1, [pc, #300]	; (b4fd4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b4ea8:	2204      	movs	r2, #4
   b4eaa:	4620      	mov	r0, r4
   b4eac:	f7ff fee9 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b4eb0:	21d9      	movs	r1, #217	; 0xd9
   b4eb2:	4620      	mov	r0, r4
   b4eb4:	f7ff fe76 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b4eb8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4ebc:	2b01      	cmp	r3, #1
   b4ebe:	bf0c      	ite	eq
   b4ec0:	2122      	moveq	r1, #34	; 0x22
   b4ec2:	21f1      	movne	r1, #241	; 0xf1
   b4ec4:	4620      	mov	r0, r4
   b4ec6:	f7ff fe6d 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b4eca:	4620      	mov	r0, r4
   b4ecc:	4942      	ldr	r1, [pc, #264]	; (b4fd8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b4ece:	2206      	movs	r2, #6
   b4ed0:	f7ff fed7 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b4ed4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ed6:	2800      	cmp	r0, #0
   b4ed8:	d063      	beq.n	b4fa2 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b4eda:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b4edc:	f000 fdf2 	bl	b5ac4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b4ee0:	2001      	movs	r0, #1
   b4ee2:	e76b      	b.n	b4dbc <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b4ee4:	b26d      	sxtb	r5, r5
   b4ee6:	e78e      	b.n	b4e06 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b4ee8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b4eec:	2101      	movs	r1, #1
   b4eee:	b280      	uxth	r0, r0
   b4ef0:	f001 fac0 	bl	b6474 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b4ef4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ef8:	2101      	movs	r1, #1
   b4efa:	b280      	uxth	r0, r0
   b4efc:	f001 faba 	bl	b6474 <pinMode>
    SSD1306_DESELECT
   b4f00:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f04:	2101      	movs	r1, #1
   b4f06:	b280      	uxth	r0, r0
   b4f08:	f001 fac5 	bl	b6496 <digitalWrite>
    if(spi) { // Hardware SPI
   b4f0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b4f0e:	b13d      	cbz	r5, b4f20 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b4f10:	f1b8 0f00 	cmp.w	r8, #0
   b4f14:	f43f af7e 	beq.w	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b4f18:	4628      	mov	r0, r5
   b4f1a:	f001 f803 	bl	b5f24 <_ZN8SPIClass5beginEv>
   b4f1e:	e779      	b.n	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b4f20:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4f24:	2101      	movs	r1, #1
   b4f26:	b280      	uxth	r0, r0
   b4f28:	f001 faa4 	bl	b6474 <pinMode>
      pinMode(clkPin , OUTPUT);
   b4f2c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f30:	2101      	movs	r1, #1
   b4f32:	b280      	uxth	r0, r0
   b4f34:	f001 fa9e 	bl	b6474 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b4f38:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f3c:	4629      	mov	r1, r5
   b4f3e:	b280      	uxth	r0, r0
   b4f40:	f001 faa9 	bl	b6496 <digitalWrite>
   b4f44:	e766      	b.n	b4e14 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b4f46:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f48:	b118      	cbz	r0, b4f52 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b4f4a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4f4e:	f001 f817 	bl	b5f80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4f52:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4f56:	2100      	movs	r1, #0
   b4f58:	b280      	uxth	r0, r0
   b4f5a:	f001 fa9c 	bl	b6496 <digitalWrite>
   b4f5e:	e780      	b.n	b4e62 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b4f60:	4a1e      	ldr	r2, [pc, #120]	; (b4fdc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b4f62:	4293      	cmp	r3, r2
   b4f64:	d10e      	bne.n	b4f84 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b4f66:	491e      	ldr	r1, [pc, #120]	; (b4fe0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b4f68:	2203      	movs	r2, #3
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	f7ff fe89 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b4f70:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f74:	2b01      	cmp	r3, #1
   b4f76:	bf0c      	ite	eq
   b4f78:	219f      	moveq	r1, #159	; 0x9f
   b4f7a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f7c:	4620      	mov	r0, r4
   b4f7e:	f7ff fe11 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b4f82:	e795      	b.n	b4eb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b4f84:	4a17      	ldr	r2, [pc, #92]	; (b4fe4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b4f86:	4293      	cmp	r3, r2
   b4f88:	d192      	bne.n	b4eb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b4f8a:	4917      	ldr	r1, [pc, #92]	; (b4fe8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b4f8c:	2203      	movs	r2, #3
   b4f8e:	4620      	mov	r0, r4
   b4f90:	f7ff fe77 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b4f94:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b4f98:	2b01      	cmp	r3, #1
   b4f9a:	bf0c      	ite	eq
   b4f9c:	2110      	moveq	r1, #16
   b4f9e:	21af      	movne	r1, #175	; 0xaf
   b4fa0:	e7ec      	b.n	b4f7c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b4fa2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4fa6:	2101      	movs	r1, #1
   b4fa8:	b280      	uxth	r0, r0
   b4faa:	f001 fa74 	bl	b6496 <digitalWrite>
   b4fae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4fb0:	2800      	cmp	r0, #0
   b4fb2:	d095      	beq.n	b4ee0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4fb4:	f000 ffca 	bl	b5f4c <_ZN8SPIClass14endTransactionEv>
   b4fb8:	e792      	b.n	b4ee0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b4fba:	bf00      	nop
   b4fbc:	000b6fec 	.word	0x000b6fec
   b4fc0:	000b6d2c 	.word	0x000b6d2c
   b4fc4:	000b7234 	.word	0x000b7234
   b4fc8:	000b7238 	.word	0x000b7238
   b4fcc:	000b723c 	.word	0x000b723c
   b4fd0:	00200080 	.word	0x00200080
   b4fd4:	000b7246 	.word	0x000b7246
   b4fd8:	000b7240 	.word	0x000b7240
   b4fdc:	00400080 	.word	0x00400080
   b4fe0:	000b724a 	.word	0x000b724a
   b4fe4:	00100060 	.word	0x00100060
   b4fe8:	000b724d 	.word	0x000b724d

000b4fec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4fec:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4fee:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4ff0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b4ff4:	db3d      	blt.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b4ff6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b4ffa:	4294      	cmp	r4, r2
   b4ffc:	dd39      	ble.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b4ffe:	2900      	cmp	r1, #0
      w += x;
   b5000:	bfbe      	ittt	lt
   b5002:	185b      	addlt	r3, r3, r1
   b5004:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5006:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5008:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b500c:	18ce      	adds	r6, r1, r3
   b500e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5010:	bfc4      	itt	gt
   b5012:	1a63      	subgt	r3, r4, r1
   b5014:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5016:	2b00      	cmp	r3, #0
   b5018:	dd2b      	ble.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b501a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b501c:	10d6      	asrs	r6, r2, #3
   b501e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5022:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5024:	f002 0007 	and.w	r0, r2, #7
   b5028:	2201      	movs	r2, #1
   b502a:	4082      	lsls	r2, r0
      switch(color) {
   b502c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b502e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5030:	d016      	beq.n	b5060 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5032:	2d02      	cmp	r5, #2
   b5034:	d00b      	beq.n	b504e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5036:	b9e5      	cbnz	r5, b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5038:	43d2      	mvns	r2, r2
   b503a:	b2d2      	uxtb	r2, r2
   b503c:	440b      	add	r3, r1
   b503e:	4299      	cmp	r1, r3
   b5040:	d017      	beq.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5042:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5046:	4010      	ands	r0, r2
   b5048:	f801 0c01 	strb.w	r0, [r1, #-1]
   b504c:	e7f7      	b.n	b503e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b504e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5050:	4299      	cmp	r1, r3
   b5052:	d00e      	beq.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5054:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5058:	4050      	eors	r0, r2
   b505a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b505e:	e7f7      	b.n	b5050 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5060:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5062:	4299      	cmp	r1, r3
   b5064:	d005      	beq.n	b5072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5066:	f811 0b01 	ldrb.w	r0, [r1], #1
   b506a:	4310      	orrs	r0, r2
   b506c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5070:	e7f7      	b.n	b5062 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5072:	bd70      	pop	{r4, r5, r6, pc}

000b5074 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5074:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5076:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5078:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b507c:	db76      	blt.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b507e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5082:	42b1      	cmp	r1, r6
   b5084:	da72      	bge.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5086:	2a00      	cmp	r2, #0
      __h += __y;
   b5088:	bfbe      	ittt	lt
   b508a:	189b      	addlt	r3, r3, r2
   b508c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b508e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5090:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5094:	18d7      	adds	r7, r2, r3
   b5096:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5098:	bfc4      	itt	gt
   b509a:	1aa3      	subgt	r3, r4, r2
   b509c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b509e:	2b00      	cmp	r3, #0
   b50a0:	dd64      	ble.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b50a2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b50a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b50a8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b50ac:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b50b0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b50b2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b50b6:	d023      	beq.n	b5100 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b50b8:	f1c2 0208 	rsb	r2, r2, #8
   b50bc:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b50be:	492d      	ldr	r1, [pc, #180]	; (b5174 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b50c0:	4293      	cmp	r3, r2
   b50c2:	bf3c      	itt	cc
   b50c4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b50c8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b50cc:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b50ce:	bf3c      	itt	cc
   b50d0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b50d4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b50d8:	2d01      	cmp	r5, #1
   b50da:	d007      	beq.n	b50ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b50dc:	2d02      	cmp	r5, #2
   b50de:	d02e      	beq.n	b513e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b50e0:	b94d      	cbnz	r5, b50f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b50e2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b50e6:	ea2c 0101 	bic.w	r1, ip, r1
   b50ea:	e003      	b.n	b50f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b50ec:	f817 c006 	ldrb.w	ip, [r7, r6]
   b50f0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b50f4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b50f6:	4293      	cmp	r3, r2
   b50f8:	d338      	bcc.n	b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b50fa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b50fe:	440c      	add	r4, r1
        h -= mod;
   b5100:	1a9a      	subs	r2, r3, r2
   b5102:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5104:	2a07      	cmp	r2, #7
   b5106:	d90e      	bls.n	b5126 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5108:	2d02      	cmp	r5, #2
   b510a:	d11d      	bne.n	b5148 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b510c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b510e:	7821      	ldrb	r1, [r4, #0]
   b5110:	43c9      	mvns	r1, r1
   b5112:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5114:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5116:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b511a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b511c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b511e:	440c      	add	r4, r1
            } while(h >= 8);
   b5120:	d8f5      	bhi.n	b510e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5122:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5126:	b30a      	cbz	r2, b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5128:	4b13      	ldr	r3, [pc, #76]	; (b5178 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b512a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b512c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b512e:	d01a      	beq.n	b5166 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5130:	2d02      	cmp	r5, #2
   b5132:	d01c      	beq.n	b516e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5134:	b9d5      	cbnz	r5, b516c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5136:	7822      	ldrb	r2, [r4, #0]
   b5138:	ea22 0303 	bic.w	r3, r2, r3
   b513c:	e015      	b.n	b516a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b513e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5142:	ea81 010c 	eor.w	r1, r1, ip
   b5146:	e7d5      	b.n	b50f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5148:	1e29      	subs	r1, r5, #0
   b514a:	bf18      	it	ne
   b514c:	2101      	movne	r1, #1
   b514e:	4249      	negs	r1, r1
   b5150:	b2c9      	uxtb	r1, r1
   b5152:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5154:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5156:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5158:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b515c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b515e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5160:	4434      	add	r4, r6
            } while(h >= 8);
   b5162:	d8f7      	bhi.n	b5154 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5164:	e7dd      	b.n	b5122 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5166:	7822      	ldrb	r2, [r4, #0]
   b5168:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b516a:	7023      	strb	r3, [r4, #0]
}
   b516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b516e:	7822      	ldrb	r2, [r4, #0]
   b5170:	4053      	eors	r3, r2
   b5172:	e7fa      	b.n	b516a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5174:	000b7224 	.word	0x000b7224
   b5178:	000b722c 	.word	0x000b722c

000b517c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b517c:	b470      	push	{r4, r5, r6}
   b517e:	4614      	mov	r4, r2
  switch(rotation) {
   b5180:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5182:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5186:	2a02      	cmp	r2, #2
   b5188:	d00d      	beq.n	b51a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b518a:	2a03      	cmp	r2, #3
   b518c:	d018      	beq.n	b51c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b518e:	2a01      	cmp	r2, #1
   b5190:	d111      	bne.n	b51b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5192:	8902      	ldrh	r2, [r0, #8]
   b5194:	43e4      	mvns	r4, r4
   b5196:	4414      	add	r4, r2
   b5198:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b519a:	9603      	str	r6, [sp, #12]
   b519c:	460a      	mov	r2, r1
   b519e:	4621      	mov	r1, r4
}
   b51a0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b51a2:	f7ff bf67 	b.w	b5074 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b51a6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b51a8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b51aa:	43e4      	mvns	r4, r4
    x -= (w-1);
   b51ac:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b51ae:	4414      	add	r4, r2
    x -= (w-1);
   b51b0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b51b2:	b224      	sxth	r4, r4
    x -= (w-1);
   b51b4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b51b6:	9603      	str	r6, [sp, #12]
   b51b8:	4622      	mov	r2, r4
}
   b51ba:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b51bc:	f7ff bf16 	b.w	b4fec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b51c0:	8945      	ldrh	r5, [r0, #10]
   b51c2:	4419      	add	r1, r3
   b51c4:	1a69      	subs	r1, r5, r1
   b51c6:	b209      	sxth	r1, r1
    break;
   b51c8:	e7e7      	b.n	b519a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b51ca <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b51ca:	b430      	push	{r4, r5}
   b51cc:	4614      	mov	r4, r2
  switch(rotation) {
   b51ce:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b51d0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b51d4:	2a02      	cmp	r2, #2
   b51d6:	d00d      	beq.n	b51f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b51d8:	2a03      	cmp	r2, #3
   b51da:	d018      	beq.n	b520e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b51dc:	2a01      	cmp	r2, #1
   b51de:	d111      	bne.n	b5204 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b51e0:	18e2      	adds	r2, r4, r3
   b51e2:	8904      	ldrh	r4, [r0, #8]
   b51e4:	1aa4      	subs	r4, r4, r2
   b51e6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b51e8:	9502      	str	r5, [sp, #8]
   b51ea:	460a      	mov	r2, r1
   b51ec:	4621      	mov	r1, r4
}
   b51ee:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b51f0:	f7ff befc 	b.w	b4fec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b51f4:	8902      	ldrh	r2, [r0, #8]
   b51f6:	43c9      	mvns	r1, r1
   b51f8:	4411      	add	r1, r2
    y -= (h-1);
   b51fa:	18e2      	adds	r2, r4, r3
   b51fc:	8944      	ldrh	r4, [r0, #10]
   b51fe:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5200:	b209      	sxth	r1, r1
    y -= (h-1);
   b5202:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5204:	9502      	str	r5, [sp, #8]
   b5206:	4622      	mov	r2, r4
}
   b5208:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b520a:	f7ff bf33 	b.w	b5074 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b520e:	8942      	ldrh	r2, [r0, #10]
   b5210:	43c9      	mvns	r1, r1
   b5212:	4411      	add	r1, r2
   b5214:	b209      	sxth	r1, r1
    break;
   b5216:	e7e7      	b.n	b51e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5218 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b521c:	4604      	mov	r4, r0
  TRANSACTION_START
   b521e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5220:	2800      	cmp	r0, #0
   b5222:	d042      	beq.n	b52aa <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5224:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5226:	f000 fc4d 	bl	b5ac4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b522a:	4947      	ldr	r1, [pc, #284]	; (b5348 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b522c:	2205      	movs	r2, #5
   b522e:	4620      	mov	r0, r4
   b5230:	f7ff fd27 	bl	b4c82 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5234:	8921      	ldrh	r1, [r4, #8]
   b5236:	3901      	subs	r1, #1
   b5238:	4620      	mov	r0, r4
   b523a:	b2c9      	uxtb	r1, r1
   b523c:	f7ff fcb2 	bl	b4ba4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5240:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5244:	1dde      	adds	r6, r3, #7
   b5246:	bf48      	it	mi
   b5248:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b524c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5250:	8923      	ldrh	r3, [r4, #8]
   b5252:	10f6      	asrs	r6, r6, #3
   b5254:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5258:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b525c:	2800      	cmp	r0, #0
   b525e:	d03a      	beq.n	b52d6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5260:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5264:	f000 fc3c 	bl	b5ae0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5268:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b526a:	6803      	ldr	r3, [r0, #0]
   b526c:	2140      	movs	r1, #64	; 0x40
   b526e:	689b      	ldr	r3, [r3, #8]
   b5270:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5272:	2701      	movs	r7, #1
    while(count--) {
   b5274:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5276:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5278:	d024      	beq.n	b52c4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b527a:	2f1f      	cmp	r7, #31
   b527c:	d90c      	bls.n	b5298 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b527e:	f000 fc36 	bl	b5aee <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5282:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5286:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5288:	f000 fc2a 	bl	b5ae0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b528c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b528e:	6803      	ldr	r3, [r0, #0]
   b5290:	2140      	movs	r1, #64	; 0x40
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	4798      	blx	r3
        bytesOut = 1;
   b5296:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5298:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b529a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b529e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b52a0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b52a2:	689b      	ldr	r3, [r3, #8]
   b52a4:	4798      	blx	r3
      bytesOut++;
   b52a6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b52a8:	e7e4      	b.n	b5274 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b52aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b52ac:	b118      	cbz	r0, b52b6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b52ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b52b2:	f000 fe65 	bl	b5f80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b52b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b52ba:	2100      	movs	r1, #0
   b52bc:	b280      	uxth	r0, r0
   b52be:	f001 f8ea 	bl	b6496 <digitalWrite>
   b52c2:	e7b2      	b.n	b522a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b52c4:	f000 fc13 	bl	b5aee <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b52c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b52ca:	b378      	cbz	r0, b532c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b52cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b52ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b52d2:	f000 bbf7 	b.w	b5ac4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b52d6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b52da:	2101      	movs	r1, #1
   b52dc:	b280      	uxth	r0, r0
   b52de:	f001 f8da 	bl	b6496 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b52e2:	42ae      	cmp	r6, r5
   b52e4:	d0f0      	beq.n	b52c8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b52e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b52e8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b52ec:	b118      	cbz	r0, b52f6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b52ee:	4649      	mov	r1, r9
   b52f0:	f000 feb4 	bl	b605c <_ZN8SPIClass8transferEh>
   b52f4:	e7f5      	b.n	b52e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b52f6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b52f8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b52fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5300:	ea09 0108 	and.w	r1, r9, r8
   b5304:	b280      	uxth	r0, r0
   b5306:	f001 f8c6 	bl	b6496 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b530a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b530e:	2101      	movs	r1, #1
   b5310:	b280      	uxth	r0, r0
   b5312:	f001 f8c0 	bl	b6496 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5316:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b531a:	2100      	movs	r1, #0
   b531c:	b280      	uxth	r0, r0
   b531e:	f001 f8ba 	bl	b6496 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5322:	3f01      	subs	r7, #1
   b5324:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5328:	d1e8      	bne.n	b52fc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b532a:	e7da      	b.n	b52e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b532c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5330:	2101      	movs	r1, #1
   b5332:	b280      	uxth	r0, r0
   b5334:	f001 f8af 	bl	b6496 <digitalWrite>
   b5338:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b533a:	b118      	cbz	r0, b5344 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b533c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5340:	f000 be04 	b.w	b5f4c <_ZN8SPIClass14endTransactionEv>
}
   b5344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5348:	000b7250 	.word	0x000b7250

000b534c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b534c:	2100      	movs	r1, #0
   b534e:	220a      	movs	r2, #10
   b5350:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5354:	4770      	bx	lr

000b5356 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5356:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5358:	b510      	push	{r4, lr}
   b535a:	4604      	mov	r4, r0
    this->pin = pin;
   b535c:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b535e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5360:	b288      	uxth	r0, r1
   b5362:	f001 f8b1 	bl	b64c8 <digitalRead>
   b5366:	b108      	cbz	r0, b536c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5368:	2303      	movs	r3, #3
   b536a:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b536c:	f000 f8f2 	bl	b5554 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5370:	6020      	str	r0, [r4, #0]
#endif
}
   b5372:	bd10      	pop	{r4, pc}

000b5374 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5374:	b538      	push	{r3, r4, r5, lr}
   b5376:	460c      	mov	r4, r1
   b5378:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b537a:	4611      	mov	r1, r2
   b537c:	b2a0      	uxth	r0, r4
   b537e:	f001 f879 	bl	b6474 <pinMode>
  
  this->attach(pin);
   b5382:	4621      	mov	r1, r4
   b5384:	4628      	mov	r0, r5
}
   b5386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b538a:	f7ff bfe4 	b.w	b5356 <_ZN8Debounce6attachEi>

000b538e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b538e:	b538      	push	{r3, r4, r5, lr}
   b5390:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5392:	79c0      	ldrb	r0, [r0, #7]
   b5394:	f001 f898 	bl	b64c8 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5398:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b539a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b539c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b53a0:	bf18      	it	ne
   b53a2:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b53a4:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b53a8:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b53aa:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b53ac:	d00a      	beq.n	b53c4 <_ZN8Debounce6updateEv+0x36>
   b53ae:	f000 f8d1 	bl	b5554 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b53b2:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b53b4:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b53b6:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b53ba:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b53bc:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b53be:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b53c2:	bd38      	pop	{r3, r4, r5, pc}
   b53c4:	f000 f8c6 	bl	b5554 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b53c8:	6823      	ldr	r3, [r4, #0]
   b53ca:	1ac0      	subs	r0, r0, r3
   b53cc:	88a3      	ldrh	r3, [r4, #4]
   b53ce:	4298      	cmp	r0, r3
   b53d0:	d3f4      	bcc.n	b53bc <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b53d2:	79a3      	ldrb	r3, [r4, #6]
   b53d4:	f003 0301 	and.w	r3, r3, #1
   b53d8:	42ab      	cmp	r3, r5
   b53da:	d0ef      	beq.n	b53bc <_ZN8Debounce6updateEv+0x2e>
   b53dc:	f000 f8ba 	bl	b5554 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b53e0:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b53e2:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b53e4:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b53e8:	f043 0308 	orr.w	r3, r3, #8
   b53ec:	e7e5      	b.n	b53ba <_ZN8Debounce6updateEv+0x2c>
	...

000b53f0 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b53f0:	b510      	push	{r4, lr}
   b53f2:	4b06      	ldr	r3, [pc, #24]	; (b540c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b53f4:	6003      	str	r3, [r0, #0]
   b53f6:	4604      	mov	r4, r0
	if (mutex) {
   b53f8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b53fa:	b108      	cbz	r0, b5400 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b53fc:	f000 f88a 	bl	b5514 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b5400:	4620      	mov	r0, r4
   b5402:	f7ff fb29 	bl	b4a58 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b5406:	4620      	mov	r0, r4
   b5408:	bd10      	pop	{r4, pc}
   b540a:	bf00      	nop
   b540c:	000b7260 	.word	0x000b7260

000b5410 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b5410:	b510      	push	{r4, lr}
   b5412:	4604      	mov	r4, r0
}
   b5414:	f7ff ffec 	bl	b53f0 <_ZN16OledWingAdafruitD1Ev>
   b5418:	4620      	mov	r0, r4
   b541a:	2170      	movs	r1, #112	; 0x70
   b541c:	f7fe fe43 	bl	b40a6 <_ZdlPvj>
   b5420:	4620      	mov	r0, r4
   b5422:	bd10      	pop	{r4, pc}

000b5424 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b5424:	b530      	push	{r4, r5, lr}
   b5426:	b085      	sub	sp, #20
   b5428:	4604      	mov	r4, r0
   b542a:	460d      	mov	r5, r1
   b542c:	f001 f87a 	bl	b6524 <_Z19__fetch_global_Wirev>
   b5430:	4a10      	ldr	r2, [pc, #64]	; (b5474 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b5432:	4911      	ldr	r1, [pc, #68]	; (b5478 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5434:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b543c:	2180      	movs	r1, #128	; 0x80
   b543e:	4603      	mov	r3, r0
   b5440:	9200      	str	r2, [sp, #0]
   b5442:	4620      	mov	r0, r4
   b5444:	2220      	movs	r2, #32
   b5446:	f7ff fb7f 	bl	b4b48 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b544a:	4b0c      	ldr	r3, [pc, #48]	; (b547c <_ZN16OledWingAdafruitC1Ei+0x58>)
   b544c:	6023      	str	r3, [r4, #0]
   b544e:	2300      	movs	r3, #0
   b5450:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5454:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5458:	f7ff ff78 	bl	b534c <_ZN8DebounceC1Ev>
   b545c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5460:	f7ff ff74 	bl	b534c <_ZN8DebounceC1Ev>
   b5464:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5468:	f7ff ff70 	bl	b534c <_ZN8DebounceC1Ev>
}
   b546c:	4620      	mov	r0, r4
   b546e:	b005      	add	sp, #20
   b5470:	bd30      	pop	{r4, r5, pc}
   b5472:	bf00      	nop
   b5474:	00061a80 	.word	0x00061a80
   b5478:	000186a0 	.word	0x000186a0
   b547c:	000b7260 	.word	0x000b7260

000b5480 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b5480:	b513      	push	{r0, r1, r4, lr}
   b5482:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5484:	3050      	adds	r0, #80	; 0x50
   b5486:	f000 f83d 	bl	b5504 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b548a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b548c:	07d9      	lsls	r1, r3, #31
   b548e:	d505      	bpl.n	b549c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b5490:	2202      	movs	r2, #2
   b5492:	2104      	movs	r1, #4
   b5494:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5498:	f7ff ff6c 	bl	b5374 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b549c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b549e:	079a      	lsls	r2, r3, #30
   b54a0:	d505      	bpl.n	b54ae <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b54a2:	2200      	movs	r2, #0
   b54a4:	2103      	movs	r1, #3
   b54a6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b54aa:	f7ff ff63 	bl	b5374 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b54ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b54b0:	075b      	lsls	r3, r3, #29
   b54b2:	d505      	bpl.n	b54c0 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b54b4:	2202      	movs	r2, #2
   b54b6:	4611      	mov	r1, r2
   b54b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b54bc:	f7ff ff5a 	bl	b5374 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b54c0:	2301      	movs	r3, #1
   b54c2:	9300      	str	r3, [sp, #0]
   b54c4:	223c      	movs	r2, #60	; 0x3c
   b54c6:	2102      	movs	r1, #2
   b54c8:	4620      	mov	r0, r4
   b54ca:	f7ff fc45 	bl	b4d58 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b54ce:	b002      	add	sp, #8
   b54d0:	bd10      	pop	{r4, pc}

000b54d2 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b54d2:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b54d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b54d6:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b54d8:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b54da:	d502      	bpl.n	b54e2 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b54dc:	3058      	adds	r0, #88	; 0x58
   b54de:	f7ff ff56 	bl	b538e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b54e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b54e4:	079a      	lsls	r2, r3, #30
   b54e6:	d503      	bpl.n	b54f0 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b54e8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b54ec:	f7ff ff4f 	bl	b538e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b54f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b54f2:	075b      	lsls	r3, r3, #29
   b54f4:	d505      	bpl.n	b5502 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b54f6:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b54fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b54fe:	f7ff bf46 	b.w	b538e <_ZN8Debounce6updateEv>
}
   b5502:	bd10      	pop	{r4, pc}

000b5504 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <os_mutex_create+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	00030248 	.word	0x00030248

000b5514 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <os_mutex_destroy+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	00030248 	.word	0x00030248

000b5524 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <os_mutex_recursive_create+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	00030248 	.word	0x00030248

000b5534 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <HAL_RNG_GetRandomNumber+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	685b      	ldr	r3, [r3, #4]
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	00030218 	.word	0x00030218

000b5544 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <HAL_Delay_Microseconds+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	68db      	ldr	r3, [r3, #12]
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	00030218 	.word	0x00030218

000b5554 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	695b      	ldr	r3, [r3, #20]
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	00030218 	.word	0x00030218

000b5564 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <hal_gpio_mode+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	689b      	ldr	r3, [r3, #8]
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	0003022c 	.word	0x0003022c

000b5574 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <hal_gpio_get_mode+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	68db      	ldr	r3, [r3, #12]
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	0003022c 	.word	0x0003022c

000b5584 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <hal_gpio_write+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	691b      	ldr	r3, [r3, #16]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	0003022c 	.word	0x0003022c

000b5594 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <hal_gpio_read+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	695b      	ldr	r3, [r3, #20]
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	0003022c 	.word	0x0003022c

000b55a4 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <hal_interrupt_attach+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	699b      	ldr	r3, [r3, #24]
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	0003022c 	.word	0x0003022c

000b55b4 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <hal_interrupt_detach+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	69db      	ldr	r3, [r3, #28]
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	0003022c 	.word	0x0003022c

000b55c4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <hal_i2c_set_speed+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	681b      	ldr	r3, [r3, #0]
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	00030228 	.word	0x00030228

000b55d4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <hal_i2c_begin+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	68db      	ldr	r3, [r3, #12]
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	00030228 	.word	0x00030228

000b55e4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <hal_i2c_begin_transmission+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	699b      	ldr	r3, [r3, #24]
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	00030228 	.word	0x00030228

000b55f4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <hal_i2c_end_transmission+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	69db      	ldr	r3, [r3, #28]
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	00030228 	.word	0x00030228

000b5604 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <hal_i2c_write+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	6a1b      	ldr	r3, [r3, #32]
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	00030228 	.word	0x00030228

000b5614 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <hal_i2c_available+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	00030228 	.word	0x00030228

000b5624 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <hal_i2c_read+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	00030228 	.word	0x00030228

000b5634 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <hal_i2c_peek+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	00030228 	.word	0x00030228

000b5644 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <hal_i2c_flush+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	00030228 	.word	0x00030228

000b5654 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <hal_i2c_is_enabled+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	00030228 	.word	0x00030228

000b5664 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <hal_i2c_init+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	00030228 	.word	0x00030228

000b5674 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <inet_inet_ntop+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	695b      	ldr	r3, [r3, #20]
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	00030264 	.word	0x00030264

000b5684 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <netdb_freeaddrinfo+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	689b      	ldr	r3, [r3, #8]
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	00030268 	.word	0x00030268

000b5694 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <netdb_getaddrinfo+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	68db      	ldr	r3, [r3, #12]
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	00030268 	.word	0x00030268

000b56a4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <hal_spi_begin+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	681b      	ldr	r3, [r3, #0]
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	00030230 	.word	0x00030230

000b56b4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <hal_spi_transfer+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	695b      	ldr	r3, [r3, #20]
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	00030230 	.word	0x00030230

000b56c4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <hal_spi_init+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	69db      	ldr	r3, [r3, #28]
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	00030230 	.word	0x00030230

000b56d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <hal_spi_is_enabled+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	6a1b      	ldr	r3, [r3, #32]
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	00030230 	.word	0x00030230

000b56e4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <hal_spi_info+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	00030230 	.word	0x00030230

000b56f4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <hal_spi_set_settings+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	00030230 	.word	0x00030230

000b5704 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <hal_spi_acquire+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	00030230 	.word	0x00030230

000b5714 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <hal_spi_release+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	00030230 	.word	0x00030230

000b5724 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <hal_usart_write+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	68db      	ldr	r3, [r3, #12]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	0003023c 	.word	0x0003023c

000b5734 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <hal_usart_available+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	691b      	ldr	r3, [r3, #16]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	0003023c 	.word	0x0003023c

000b5744 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <hal_usart_read+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	695b      	ldr	r3, [r3, #20]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	0003023c 	.word	0x0003023c

000b5754 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <hal_usart_peek+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	699b      	ldr	r3, [r3, #24]
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	0003023c 	.word	0x0003023c

000b5764 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <hal_usart_flush+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	69db      	ldr	r3, [r3, #28]
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	0003023c 	.word	0x0003023c

000b5774 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <hal_usart_is_enabled+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	6a1b      	ldr	r3, [r3, #32]
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	0003023c 	.word	0x0003023c

000b5784 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <hal_usart_available_data_for_write+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	0003023c 	.word	0x0003023c

000b5794 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <hal_usart_init_ex+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	0003023c 	.word	0x0003023c

000b57a4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <HAL_USB_USART_Init+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	681b      	ldr	r3, [r3, #0]
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	0003024c 	.word	0x0003024c

000b57b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <HAL_USB_USART_Available_Data+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	691b      	ldr	r3, [r3, #16]
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	0003024c 	.word	0x0003024c

000b57c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	695b      	ldr	r3, [r3, #20]
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	0003024c 	.word	0x0003024c

000b57d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <HAL_USB_USART_Receive_Data+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	699b      	ldr	r3, [r3, #24]
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	0003024c 	.word	0x0003024c

000b57e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <HAL_USB_USART_Send_Data+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	69db      	ldr	r3, [r3, #28]
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	0003024c 	.word	0x0003024c

000b57f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <HAL_USB_USART_Flush_Data+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	6a1b      	ldr	r3, [r3, #32]
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	0003024c 	.word	0x0003024c

000b5804 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5804:	b508      	push	{r3, lr}
   b5806:	4b02      	ldr	r3, [pc, #8]	; (b5810 <panic_+0xc>)
   b5808:	681b      	ldr	r3, [r3, #0]
   b580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b580c:	9301      	str	r3, [sp, #4]
   b580e:	bd08      	pop	{r3, pc}
   b5810:	00030260 	.word	0x00030260

000b5814 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <set_system_mode+0xc>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	685b      	ldr	r3, [r3, #4]
   b581c:	9301      	str	r3, [sp, #4]
   b581e:	bd08      	pop	{r3, pc}
   b5820:	00030220 	.word	0x00030220

000b5824 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b02      	ldr	r3, [pc, #8]	; (b5830 <system_delay_ms+0xc>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	695b      	ldr	r3, [r3, #20]
   b582c:	9301      	str	r3, [sp, #4]
   b582e:	bd08      	pop	{r3, pc}
   b5830:	00030220 	.word	0x00030220

000b5834 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5834:	b508      	push	{r3, lr}
   b5836:	4b02      	ldr	r3, [pc, #8]	; (b5840 <system_thread_set_state+0xc>)
   b5838:	681b      	ldr	r3, [r3, #0]
   b583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b583c:	9301      	str	r3, [sp, #4]
   b583e:	bd08      	pop	{r3, pc}
   b5840:	00030220 	.word	0x00030220

000b5844 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5844:	b508      	push	{r3, lr}
   b5846:	4b03      	ldr	r3, [pc, #12]	; (b5854 <system_ctrl_set_app_request_handler+0x10>)
   b5848:	681b      	ldr	r3, [r3, #0]
   b584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b584e:	9301      	str	r3, [sp, #4]
   b5850:	bd08      	pop	{r3, pc}
   b5852:	0000      	.short	0x0000
   b5854:	00030220 	.word	0x00030220

000b5858 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b03      	ldr	r3, [pc, #12]	; (b5868 <system_ctrl_set_result+0x10>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5862:	9301      	str	r3, [sp, #4]
   b5864:	bd08      	pop	{r3, pc}
   b5866:	0000      	.short	0x0000
   b5868:	00030220 	.word	0x00030220

000b586c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b586c:	b508      	push	{r3, lr}
   b586e:	4b02      	ldr	r3, [pc, #8]	; (b5878 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5870:	681b      	ldr	r3, [r3, #0]
   b5872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5874:	9301      	str	r3, [sp, #4]
   b5876:	bd08      	pop	{r3, pc}
   b5878:	00030244 	.word	0x00030244

000b587c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b587c:	b508      	push	{r3, lr}
   b587e:	4b02      	ldr	r3, [pc, #8]	; (b5888 <network_connect+0xc>)
   b5880:	681b      	ldr	r3, [r3, #0]
   b5882:	685b      	ldr	r3, [r3, #4]
   b5884:	9301      	str	r3, [sp, #4]
   b5886:	bd08      	pop	{r3, pc}
   b5888:	00030240 	.word	0x00030240

000b588c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b588c:	b508      	push	{r3, lr}
   b588e:	4b02      	ldr	r3, [pc, #8]	; (b5898 <network_connecting+0xc>)
   b5890:	681b      	ldr	r3, [r3, #0]
   b5892:	689b      	ldr	r3, [r3, #8]
   b5894:	9301      	str	r3, [sp, #4]
   b5896:	bd08      	pop	{r3, pc}
   b5898:	00030240 	.word	0x00030240

000b589c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <network_disconnect+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	68db      	ldr	r3, [r3, #12]
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	00030240 	.word	0x00030240

000b58ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <network_ready+0xc>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	691b      	ldr	r3, [r3, #16]
   b58b4:	9301      	str	r3, [sp, #4]
   b58b6:	bd08      	pop	{r3, pc}
   b58b8:	00030240 	.word	0x00030240

000b58bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b58bc:	b508      	push	{r3, lr}
   b58be:	4b02      	ldr	r3, [pc, #8]	; (b58c8 <network_on+0xc>)
   b58c0:	681b      	ldr	r3, [r3, #0]
   b58c2:	695b      	ldr	r3, [r3, #20]
   b58c4:	9301      	str	r3, [sp, #4]
   b58c6:	bd08      	pop	{r3, pc}
   b58c8:	00030240 	.word	0x00030240

000b58cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b02      	ldr	r3, [pc, #8]	; (b58d8 <network_off+0xc>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	699b      	ldr	r3, [r3, #24]
   b58d4:	9301      	str	r3, [sp, #4]
   b58d6:	bd08      	pop	{r3, pc}
   b58d8:	00030240 	.word	0x00030240

000b58dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <network_listen+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	69db      	ldr	r3, [r3, #28]
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	00030240 	.word	0x00030240

000b58ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <network_listening+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	6a1b      	ldr	r3, [r3, #32]
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	00030240 	.word	0x00030240

000b58fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b58fc:	b508      	push	{r3, lr}
   b58fe:	4b02      	ldr	r3, [pc, #8]	; (b5908 <network_set_listen_timeout+0xc>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	bd08      	pop	{r3, pc}
   b5908:	00030240 	.word	0x00030240

000b590c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <network_get_listen_timeout+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	00030240 	.word	0x00030240

000b591c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b02      	ldr	r3, [pc, #8]	; (b5928 <network_is_on+0xc>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5924:	9301      	str	r3, [sp, #4]
   b5926:	bd08      	pop	{r3, pc}
   b5928:	00030240 	.word	0x00030240

000b592c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b592c:	b508      	push	{r3, lr}
   b592e:	4b02      	ldr	r3, [pc, #8]	; (b5938 <network_is_off+0xc>)
   b5930:	681b      	ldr	r3, [r3, #0]
   b5932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5934:	9301      	str	r3, [sp, #4]
   b5936:	bd08      	pop	{r3, pc}
   b5938:	00030240 	.word	0x00030240

000b593c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b593c:	b508      	push	{r3, lr}
   b593e:	4b02      	ldr	r3, [pc, #8]	; (b5948 <malloc+0xc>)
   b5940:	681b      	ldr	r3, [r3, #0]
   b5942:	681b      	ldr	r3, [r3, #0]
   b5944:	9301      	str	r3, [sp, #4]
   b5946:	bd08      	pop	{r3, pc}
   b5948:	0003021c 	.word	0x0003021c

000b594c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b594c:	b508      	push	{r3, lr}
   b594e:	4b02      	ldr	r3, [pc, #8]	; (b5958 <free+0xc>)
   b5950:	681b      	ldr	r3, [r3, #0]
   b5952:	685b      	ldr	r3, [r3, #4]
   b5954:	9301      	str	r3, [sp, #4]
   b5956:	bd08      	pop	{r3, pc}
   b5958:	0003021c 	.word	0x0003021c

000b595c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b595c:	b508      	push	{r3, lr}
   b595e:	4b02      	ldr	r3, [pc, #8]	; (b5968 <vsnprintf+0xc>)
   b5960:	681b      	ldr	r3, [r3, #0]
   b5962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5964:	9301      	str	r3, [sp, #4]
   b5966:	bd08      	pop	{r3, pc}
   b5968:	0003021c 	.word	0x0003021c

000b596c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b596c:	b508      	push	{r3, lr}
   b596e:	4b02      	ldr	r3, [pc, #8]	; (b5978 <__assert_func+0xc>)
   b5970:	681b      	ldr	r3, [r3, #0]
   b5972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5974:	9301      	str	r3, [sp, #4]
   b5976:	bd08      	pop	{r3, pc}
   b5978:	0003021c 	.word	0x0003021c

000b597c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b597c:	b508      	push	{r3, lr}
   b597e:	4b02      	ldr	r3, [pc, #8]	; (b5988 <newlib_impure_ptr_callback+0xc>)
   b5980:	681b      	ldr	r3, [r3, #0]
   b5982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5984:	9301      	str	r3, [sp, #4]
   b5986:	bd08      	pop	{r3, pc}
   b5988:	0003021c 	.word	0x0003021c

000b598c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b598c:	2100      	movs	r1, #0
   b598e:	f7ff bf49 	b.w	b5824 <system_delay_ms>

000b5992 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5992:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5994:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5996:	4604      	mov	r4, r0
      if (_M_manager)
   b5998:	b113      	cbz	r3, b59a0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b599a:	2203      	movs	r2, #3
   b599c:	4601      	mov	r1, r0
   b599e:	4798      	blx	r3
    }
   b59a0:	4620      	mov	r0, r4
   b59a2:	bd10      	pop	{r4, pc}

000b59a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b59a4:	4802      	ldr	r0, [pc, #8]	; (b59b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b59a6:	2300      	movs	r3, #0
   b59a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b59aa:	f7ff bdbb 	b.w	b5524 <os_mutex_recursive_create>
   b59ae:	bf00      	nop
   b59b0:	2003e634 	.word	0x2003e634

000b59b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b59b4:	2200      	movs	r2, #0
   b59b6:	6840      	ldr	r0, [r0, #4]
   b59b8:	4611      	mov	r1, r2
   b59ba:	f7ff bf97 	b.w	b58ec <network_listening>

000b59be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b59be:	2200      	movs	r2, #0
   b59c0:	6840      	ldr	r0, [r0, #4]
   b59c2:	4611      	mov	r1, r2
   b59c4:	f7ff bfa2 	b.w	b590c <network_get_listen_timeout>

000b59c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b59c8:	6840      	ldr	r0, [r0, #4]
   b59ca:	2200      	movs	r2, #0
   b59cc:	f7ff bf96 	b.w	b58fc <network_set_listen_timeout>

000b59d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b59d0:	6840      	ldr	r0, [r0, #4]
   b59d2:	2200      	movs	r2, #0
   b59d4:	f081 0101 	eor.w	r1, r1, #1
   b59d8:	f7ff bf80 	b.w	b58dc <network_listen>

000b59dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b59dc:	2300      	movs	r3, #0
   b59de:	6840      	ldr	r0, [r0, #4]
   b59e0:	461a      	mov	r2, r3
   b59e2:	4619      	mov	r1, r3
   b59e4:	f7ff bf72 	b.w	b58cc <network_off>

000b59e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b59e8:	2300      	movs	r3, #0
   b59ea:	6840      	ldr	r0, [r0, #4]
   b59ec:	461a      	mov	r2, r3
   b59ee:	4619      	mov	r1, r3
   b59f0:	f7ff bf64 	b.w	b58bc <network_on>

000b59f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b59f4:	2200      	movs	r2, #0
   b59f6:	6840      	ldr	r0, [r0, #4]
   b59f8:	4611      	mov	r1, r2
   b59fa:	f7ff bf57 	b.w	b58ac <network_ready>

000b59fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b59fe:	2200      	movs	r2, #0
   b5a00:	6840      	ldr	r0, [r0, #4]
   b5a02:	4611      	mov	r1, r2
   b5a04:	f7ff bf42 	b.w	b588c <network_connecting>

000b5a08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5a08:	6840      	ldr	r0, [r0, #4]
   b5a0a:	2200      	movs	r2, #0
   b5a0c:	2102      	movs	r1, #2
   b5a0e:	f7ff bf45 	b.w	b589c <network_disconnect>

000b5a12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5a12:	2300      	movs	r3, #0
   b5a14:	6840      	ldr	r0, [r0, #4]
   b5a16:	461a      	mov	r2, r3
   b5a18:	f7ff bf30 	b.w	b587c <network_connect>

000b5a1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5a1c:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5a1e:	2203      	movs	r2, #3
   b5a20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5a22:	4a02      	ldr	r2, [pc, #8]	; (b5a2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5a24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5a26:	4770      	bx	lr
   b5a28:	2003e638 	.word	0x2003e638
   b5a2c:	000b72b8 	.word	0x000b72b8

000b5a30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5a30:	4770      	bx	lr

000b5a32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a34:	4606      	mov	r6, r0
   b5a36:	4615      	mov	r5, r2
   b5a38:	460c      	mov	r4, r1
   b5a3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5a3c:	42bc      	cmp	r4, r7
   b5a3e:	d006      	beq.n	b5a4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5a40:	6833      	ldr	r3, [r6, #0]
   b5a42:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5a46:	689b      	ldr	r3, [r3, #8]
   b5a48:	4630      	mov	r0, r6
   b5a4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5a4c:	e7f6      	b.n	b5a3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5a4e:	4628      	mov	r0, r5
   b5a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5a52:	7c00      	ldrb	r0, [r0, #16]
   b5a54:	2200      	movs	r2, #0
   b5a56:	f7ff bdd5 	b.w	b5604 <hal_i2c_write>

000b5a5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5a5a:	7c00      	ldrb	r0, [r0, #16]
   b5a5c:	2100      	movs	r1, #0
   b5a5e:	f7ff bdd9 	b.w	b5614 <hal_i2c_available>

000b5a62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5a62:	7c00      	ldrb	r0, [r0, #16]
   b5a64:	2100      	movs	r1, #0
   b5a66:	f7ff bddd 	b.w	b5624 <hal_i2c_read>

000b5a6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5a6a:	7c00      	ldrb	r0, [r0, #16]
   b5a6c:	2100      	movs	r1, #0
   b5a6e:	f7ff bde1 	b.w	b5634 <hal_i2c_peek>

000b5a72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5a72:	7c00      	ldrb	r0, [r0, #16]
   b5a74:	2100      	movs	r1, #0
   b5a76:	f7ff bde5 	b.w	b5644 <hal_i2c_flush>

000b5a7a <_ZN7TwoWireD0Ev>:
   b5a7a:	b510      	push	{r4, lr}
   b5a7c:	2114      	movs	r1, #20
   b5a7e:	4604      	mov	r4, r0
   b5a80:	f7fe fb11 	bl	b40a6 <_ZdlPvj>
   b5a84:	4620      	mov	r0, r4
   b5a86:	bd10      	pop	{r4, pc}

000b5a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a88:	b538      	push	{r3, r4, r5, lr}
   b5a8a:	4604      	mov	r4, r0
   b5a8c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a92:	2200      	movs	r2, #0
   b5a94:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5a98:	4b09      	ldr	r3, [pc, #36]	; (b5ac0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5a9a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5a9c:	4608      	mov	r0, r1
   b5a9e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5aa0:	4629      	mov	r1, r5
   b5aa2:	f7ff fddf 	bl	b5664 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5aa6:	30bf      	adds	r0, #191	; 0xbf
   b5aa8:	d108      	bne.n	b5abc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5aaa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5aac:	07db      	lsls	r3, r3, #31
   b5aae:	d505      	bpl.n	b5abc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5ab0:	6868      	ldr	r0, [r5, #4]
   b5ab2:	f7ff ff4b 	bl	b594c <free>
    free(conf.tx_buffer);
   b5ab6:	68e8      	ldr	r0, [r5, #12]
   b5ab8:	f7ff ff48 	bl	b594c <free>
}
   b5abc:	4620      	mov	r0, r4
   b5abe:	bd38      	pop	{r3, r4, r5, pc}
   b5ac0:	000b72f4 	.word	0x000b72f4

000b5ac4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b5ac4:	7c00      	ldrb	r0, [r0, #16]
   b5ac6:	2200      	movs	r2, #0
   b5ac8:	f7ff bd7c 	b.w	b55c4 <hal_i2c_set_speed>

000b5acc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5acc:	2300      	movs	r3, #0
   b5ace:	7c00      	ldrb	r0, [r0, #16]
   b5ad0:	461a      	mov	r2, r3
   b5ad2:	4619      	mov	r1, r3
   b5ad4:	f7ff bd7e 	b.w	b55d4 <hal_i2c_begin>

000b5ad8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5ad8:	7c00      	ldrb	r0, [r0, #16]
   b5ada:	2200      	movs	r2, #0
   b5adc:	f7ff bd82 	b.w	b55e4 <hal_i2c_begin_transmission>

000b5ae0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5ae0:	b2c9      	uxtb	r1, r1
   b5ae2:	f7ff bff9 	b.w	b5ad8 <_ZN7TwoWire17beginTransmissionEh>

000b5ae6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5ae6:	7c00      	ldrb	r0, [r0, #16]
   b5ae8:	2200      	movs	r2, #0
   b5aea:	f7ff bd83 	b.w	b55f4 <hal_i2c_end_transmission>

000b5aee <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5aee:	2101      	movs	r1, #1
   b5af0:	f7ff bff9 	b.w	b5ae6 <_ZN7TwoWire15endTransmissionEh>

000b5af4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b5af4:	4700      	bx	r0
	...

000b5af8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b5af8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b5afc:	2400      	movs	r4, #0
{
   b5afe:	461d      	mov	r5, r3
   b5b00:	460f      	mov	r7, r1
   b5b02:	4690      	mov	r8, r2
   b5b04:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b5b06:	f7ff fd55 	bl	b55b4 <hal_interrupt_detach>
  if (priority >= 0) {
   b5b0a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5b0c:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b5b10:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5b14:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b5b18:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b5b1c:	bfa2      	ittt	ge
   b5b1e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b5b22:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b5b26:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5b28:	4907      	ldr	r1, [pc, #28]	; (b5b48 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b5b2a:	9400      	str	r4, [sp, #0]
   b5b2c:	4643      	mov	r3, r8
   b5b2e:	463a      	mov	r2, r7
   b5b30:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b5b32:	bfa8      	it	ge
   b5b34:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5b38:	f7ff fd34 	bl	b55a4 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b5b3c:	fab0 f080 	clz	r0, r0
   b5b40:	0940      	lsrs	r0, r0, #5
   b5b42:	b004      	add	sp, #16
   b5b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5b48:	000b5af5 	.word	0x000b5af5

000b5b4c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   b5b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b4e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != hal_interrupt_detach(pin)) {
   b5b50:	f7ff fd30 	bl	b55b4 <hal_interrupt_detach>
   b5b54:	4605      	mov	r5, r0
   b5b56:	b970      	cbnz	r0, b5b76 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   b5b58:	4f08      	ldr	r7, [pc, #32]	; (b5b7c <_Z15detachInterruptt+0x30>)
   b5b5a:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   b5b5e:	b146      	cbz	r6, b5b72 <_Z15detachInterruptt+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5b60:	4630      	mov	r0, r6
   b5b62:	f7ff ff16 	bl	b5992 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   b5b66:	2110      	movs	r1, #16
   b5b68:	4630      	mov	r0, r6
   b5b6a:	f7fe fa9c 	bl	b40a6 <_ZdlPvj>
        handlers[pin] = nullptr;
   b5b6e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   b5b72:	2001      	movs	r0, #1
   b5b74:	e000      	b.n	b5b78 <_Z15detachInterruptt+0x2c>
        return false;
   b5b76:	2000      	movs	r0, #0
    }
    return true;
}
   b5b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5b7a:	bf00      	nop
   b5b7c:	2003e640 	.word	0x2003e640

000b5b80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5b80:	4770      	bx	lr

000b5b82 <_ZN9IPAddressD0Ev>:
   b5b82:	b510      	push	{r4, lr}
   b5b84:	2118      	movs	r1, #24
   b5b86:	4604      	mov	r4, r0
   b5b88:	f7fe fa8d 	bl	b40a6 <_ZdlPvj>
   b5b8c:	4620      	mov	r0, r4
   b5b8e:	bd10      	pop	{r4, pc}

000b5b90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5b90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5b92:	7d03      	ldrb	r3, [r0, #20]
   b5b94:	2b06      	cmp	r3, #6
{
   b5b96:	b08d      	sub	sp, #52	; 0x34
   b5b98:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5b9a:	f100 0704 	add.w	r7, r0, #4
   b5b9e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5ba2:	d012      	beq.n	b5bca <_ZNK9IPAddress7printToER5Print+0x3a>
   b5ba4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5ba8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5bac:	220a      	movs	r2, #10
   b5bae:	4630      	mov	r0, r6
   b5bb0:	f000 f953 	bl	b5e5a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5bb4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5bb6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5bb8:	d019      	beq.n	b5bee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5bba:	2c00      	cmp	r4, #0
   b5bbc:	d0f4      	beq.n	b5ba8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5bbe:	212e      	movs	r1, #46	; 0x2e
   b5bc0:	4630      	mov	r0, r6
   b5bc2:	f000 f93b 	bl	b5e3c <_ZN5Print5printEc>
   b5bc6:	4404      	add	r4, r0
   b5bc8:	e7ee      	b.n	b5ba8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5bca:	232f      	movs	r3, #47	; 0x2f
   b5bcc:	466a      	mov	r2, sp
   b5bce:	4639      	mov	r1, r7
   b5bd0:	200a      	movs	r0, #10
		buf[0] = 0;
   b5bd2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5bd6:	f7ff fd4d 	bl	b5674 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5bda:	4668      	mov	r0, sp
   b5bdc:	f7fe fa1e 	bl	b401c <strlen>
   b5be0:	6833      	ldr	r3, [r6, #0]
   b5be2:	4602      	mov	r2, r0
   b5be4:	68db      	ldr	r3, [r3, #12]
   b5be6:	4669      	mov	r1, sp
   b5be8:	4630      	mov	r0, r6
   b5bea:	4798      	blx	r3
   b5bec:	4604      	mov	r4, r0
    }
    return n;
}
   b5bee:	4620      	mov	r0, r4
   b5bf0:	b00d      	add	sp, #52	; 0x34
   b5bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5bf4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5bf4:	b510      	push	{r4, lr}
   b5bf6:	4b05      	ldr	r3, [pc, #20]	; (b5c0c <_ZN9IPAddressC1Ev+0x18>)
   b5bf8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5bfa:	2211      	movs	r2, #17
   b5bfc:	f840 3b04 	str.w	r3, [r0], #4
   b5c00:	2100      	movs	r1, #0
   b5c02:	f000 fd09 	bl	b6618 <memset>
}
   b5c06:	4620      	mov	r0, r4
   b5c08:	bd10      	pop	{r4, pc}
   b5c0a:	bf00      	nop
   b5c0c:	000b731c 	.word	0x000b731c

000b5c10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5c10:	4603      	mov	r3, r0
   b5c12:	4a07      	ldr	r2, [pc, #28]	; (b5c30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5c14:	b510      	push	{r4, lr}
   b5c16:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5c1a:	f101 0210 	add.w	r2, r1, #16
   b5c1e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5c22:	f843 4b04 	str.w	r4, [r3], #4
   b5c26:	4291      	cmp	r1, r2
   b5c28:	d1f9      	bne.n	b5c1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5c2a:	780a      	ldrb	r2, [r1, #0]
   b5c2c:	701a      	strb	r2, [r3, #0]
}
   b5c2e:	bd10      	pop	{r4, pc}
   b5c30:	000b731c 	.word	0x000b731c

000b5c34 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5c34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5c36:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5c3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5c3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5c42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5c46:	2304      	movs	r3, #4
   b5c48:	6041      	str	r1, [r0, #4]
   b5c4a:	7503      	strb	r3, [r0, #20]
}
   b5c4c:	bd10      	pop	{r4, pc}
	...

000b5c50 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5c50:	b507      	push	{r0, r1, r2, lr}
   b5c52:	4b06      	ldr	r3, [pc, #24]	; (b5c6c <_ZN9IPAddressC1EPKh+0x1c>)
   b5c54:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5c56:	78cb      	ldrb	r3, [r1, #3]
   b5c58:	9300      	str	r3, [sp, #0]
   b5c5a:	788b      	ldrb	r3, [r1, #2]
   b5c5c:	784a      	ldrb	r2, [r1, #1]
   b5c5e:	7809      	ldrb	r1, [r1, #0]
   b5c60:	f7ff ffe8 	bl	b5c34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5c64:	b003      	add	sp, #12
   b5c66:	f85d fb04 	ldr.w	pc, [sp], #4
   b5c6a:	bf00      	nop
   b5c6c:	000b731c 	.word	0x000b731c

000b5c70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5c70:	4b01      	ldr	r3, [pc, #4]	; (b5c78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5c72:	4a02      	ldr	r2, [pc, #8]	; (b5c7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5c74:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5c76:	4770      	bx	lr
   b5c78:	2003e6d0 	.word	0x2003e6d0
   b5c7c:	000b7328 	.word	0x000b7328

000b5c80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5c80:	2300      	movs	r3, #0
   b5c82:	6840      	ldr	r0, [r0, #4]
   b5c84:	461a      	mov	r2, r3
   b5c86:	f7ff bdf9 	b.w	b587c <network_connect>

000b5c8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5c8a:	6840      	ldr	r0, [r0, #4]
   b5c8c:	2200      	movs	r2, #0
   b5c8e:	2102      	movs	r1, #2
   b5c90:	f7ff be04 	b.w	b589c <network_disconnect>

000b5c94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5c94:	2200      	movs	r2, #0
   b5c96:	6840      	ldr	r0, [r0, #4]
   b5c98:	4611      	mov	r1, r2
   b5c9a:	f7ff bdf7 	b.w	b588c <network_connecting>

000b5c9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5c9e:	2200      	movs	r2, #0
   b5ca0:	6840      	ldr	r0, [r0, #4]
   b5ca2:	4611      	mov	r1, r2
   b5ca4:	f7ff be02 	b.w	b58ac <network_ready>

000b5ca8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5ca8:	2300      	movs	r3, #0
   b5caa:	6840      	ldr	r0, [r0, #4]
   b5cac:	461a      	mov	r2, r3
   b5cae:	4619      	mov	r1, r3
   b5cb0:	f7ff be04 	b.w	b58bc <network_on>

000b5cb4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5cb4:	2300      	movs	r3, #0
   b5cb6:	6840      	ldr	r0, [r0, #4]
   b5cb8:	461a      	mov	r2, r3
   b5cba:	4619      	mov	r1, r3
   b5cbc:	f7ff be06 	b.w	b58cc <network_off>

000b5cc0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5cc0:	6840      	ldr	r0, [r0, #4]
   b5cc2:	2100      	movs	r1, #0
   b5cc4:	f7ff be2a 	b.w	b591c <network_is_on>

000b5cc8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5cc8:	6840      	ldr	r0, [r0, #4]
   b5cca:	2100      	movs	r1, #0
   b5ccc:	f7ff be2e 	b.w	b592c <network_is_off>

000b5cd0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5cd0:	6840      	ldr	r0, [r0, #4]
   b5cd2:	2200      	movs	r2, #0
   b5cd4:	f081 0101 	eor.w	r1, r1, #1
   b5cd8:	f7ff be00 	b.w	b58dc <network_listen>

000b5cdc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5cdc:	6840      	ldr	r0, [r0, #4]
   b5cde:	2200      	movs	r2, #0
   b5ce0:	f7ff be0c 	b.w	b58fc <network_set_listen_timeout>

000b5ce4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5ce4:	2200      	movs	r2, #0
   b5ce6:	6840      	ldr	r0, [r0, #4]
   b5ce8:	4611      	mov	r1, r2
   b5cea:	f7ff be0f 	b.w	b590c <network_get_listen_timeout>

000b5cee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5cee:	2200      	movs	r2, #0
   b5cf0:	6840      	ldr	r0, [r0, #4]
   b5cf2:	4611      	mov	r1, r2
   b5cf4:	f7ff bdfa 	b.w	b58ec <network_listening>

000b5cf8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5cfc:	b095      	sub	sp, #84	; 0x54
   b5cfe:	4614      	mov	r4, r2
   b5d00:	460d      	mov	r5, r1
   b5d02:	4607      	mov	r7, r0
    IPAddress addr;
   b5d04:	f7ff ff76 	bl	b5bf4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5d08:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5d0a:	221c      	movs	r2, #28
   b5d0c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5d0e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5d10:	f000 fc82 	bl	b6618 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5d14:	2340      	movs	r3, #64	; 0x40
   b5d16:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5d18:	4620      	mov	r0, r4
   b5d1a:	466b      	mov	r3, sp
   b5d1c:	aa0c      	add	r2, sp, #48	; 0x30
   b5d1e:	2100      	movs	r1, #0
   b5d20:	f7ff fcb8 	bl	b5694 <netdb_getaddrinfo>
    if (!r) {
   b5d24:	4604      	mov	r4, r0
   b5d26:	2800      	cmp	r0, #0
   b5d28:	d14b      	bne.n	b5dc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5d2a:	4602      	mov	r2, r0
   b5d2c:	2101      	movs	r1, #1
   b5d2e:	6868      	ldr	r0, [r5, #4]
   b5d30:	f7ff fdbc 	bl	b58ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d34:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5d36:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d38:	4622      	mov	r2, r4
   b5d3a:	6868      	ldr	r0, [r5, #4]
   b5d3c:	f7ff fdb6 	bl	b58ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d40:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d42:	4681      	mov	r9, r0
        bool ok = false;
   b5d44:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d46:	2e00      	cmp	r6, #0
   b5d48:	d03b      	beq.n	b5dc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5d4a:	2900      	cmp	r1, #0
   b5d4c:	d139      	bne.n	b5dc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5d4e:	6873      	ldr	r3, [r6, #4]
   b5d50:	2b02      	cmp	r3, #2
   b5d52:	d003      	beq.n	b5d5c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5d54:	2b0a      	cmp	r3, #10
   b5d56:	d011      	beq.n	b5d7c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d58:	69f6      	ldr	r6, [r6, #28]
   b5d5a:	e7f4      	b.n	b5d46 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5d5c:	f1b8 0f00 	cmp.w	r8, #0
   b5d60:	d0fa      	beq.n	b5d58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5d62:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5d64:	a806      	add	r0, sp, #24
   b5d66:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5d68:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5d6a:	f7ff ff71 	bl	b5c50 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d70:	1d3c      	adds	r4, r7, #4
   b5d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d74:	682b      	ldr	r3, [r5, #0]
   b5d76:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5d78:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5d7a:	e7ed      	b.n	b5d58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5d7c:	f1b9 0f00 	cmp.w	r9, #0
   b5d80:	d0ea      	beq.n	b5d58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5d82:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5d84:	2210      	movs	r2, #16
   b5d86:	a801      	add	r0, sp, #4
   b5d88:	f000 fc46 	bl	b6618 <memset>
                    a.v = 6;
   b5d8c:	2306      	movs	r3, #6
   b5d8e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5d92:	ad01      	add	r5, sp, #4
   b5d94:	f104 0308 	add.w	r3, r4, #8
   b5d98:	3418      	adds	r4, #24
   b5d9a:	6818      	ldr	r0, [r3, #0]
   b5d9c:	6859      	ldr	r1, [r3, #4]
   b5d9e:	462a      	mov	r2, r5
   b5da0:	c203      	stmia	r2!, {r0, r1}
   b5da2:	3308      	adds	r3, #8
   b5da4:	42a3      	cmp	r3, r4
   b5da6:	4615      	mov	r5, r2
   b5da8:	d1f7      	bne.n	b5d9a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5daa:	a901      	add	r1, sp, #4
   b5dac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5dae:	ad07      	add	r5, sp, #28
   b5db0:	f7ff ff2e 	bl	b5c10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5db6:	1d3c      	adds	r4, r7, #4
   b5db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5dba:	682b      	ldr	r3, [r5, #0]
   b5dbc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5dbe:	4649      	mov	r1, r9
   b5dc0:	e7ca      	b.n	b5d58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5dc2:	9800      	ldr	r0, [sp, #0]
   b5dc4:	f7ff fc5e 	bl	b5684 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5dc8:	4638      	mov	r0, r7
   b5dca:	b015      	add	sp, #84	; 0x54
   b5dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5dd0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5dd0:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5dd2:	4a03      	ldr	r2, [pc, #12]	; (b5de0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5dd4:	601a      	str	r2, [r3, #0]
   b5dd6:	2200      	movs	r2, #0
   b5dd8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5dda:	4770      	bx	lr
   b5ddc:	2003e6d4 	.word	0x2003e6d4
   b5de0:	000b7334 	.word	0x000b7334

000b5de4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5de6:	4606      	mov	r6, r0
   b5de8:	460d      	mov	r5, r1
  size_t n = 0;
   b5dea:	188f      	adds	r7, r1, r2
   b5dec:	2400      	movs	r4, #0
  while (size--) {
   b5dee:	42bd      	cmp	r5, r7
   b5df0:	d00c      	beq.n	b5e0c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5df2:	6833      	ldr	r3, [r6, #0]
   b5df4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5df8:	689b      	ldr	r3, [r3, #8]
   b5dfa:	4630      	mov	r0, r6
   b5dfc:	4798      	blx	r3
     if (chunk>=0)
   b5dfe:	1e03      	subs	r3, r0, #0
   b5e00:	db01      	blt.n	b5e06 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5e02:	441c      	add	r4, r3
  while (size--) {
   b5e04:	e7f3      	b.n	b5dee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5e06:	2c00      	cmp	r4, #0
   b5e08:	bf08      	it	eq
   b5e0a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5e0c:	4620      	mov	r0, r4
   b5e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e10 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5e10:	b513      	push	{r0, r1, r4, lr}
   b5e12:	4604      	mov	r4, r0
    }
   b5e14:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5e16:	b159      	cbz	r1, b5e30 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5e18:	9101      	str	r1, [sp, #4]
   b5e1a:	f7fe f8ff 	bl	b401c <strlen>
   b5e1e:	6823      	ldr	r3, [r4, #0]
   b5e20:	9901      	ldr	r1, [sp, #4]
   b5e22:	68db      	ldr	r3, [r3, #12]
   b5e24:	4602      	mov	r2, r0
   b5e26:	4620      	mov	r0, r4
    }
   b5e28:	b002      	add	sp, #8
   b5e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5e2e:	4718      	bx	r3
    }
   b5e30:	b002      	add	sp, #8
   b5e32:	bd10      	pop	{r4, pc}

000b5e34 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5e34:	b508      	push	{r3, lr}
  return write(str);
   b5e36:	f7ff ffeb 	bl	b5e10 <_ZN5Print5writeEPKc>
}
   b5e3a:	bd08      	pop	{r3, pc}

000b5e3c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5e3c:	6803      	ldr	r3, [r0, #0]
   b5e3e:	689b      	ldr	r3, [r3, #8]
   b5e40:	4718      	bx	r3

000b5e42 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5e42:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5e44:	210d      	movs	r1, #13
{
   b5e46:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5e48:	f7ff fff8 	bl	b5e3c <_ZN5Print5printEc>
  n += print('\n');
   b5e4c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5e4e:	4604      	mov	r4, r0
  n += print('\n');
   b5e50:	4628      	mov	r0, r5
   b5e52:	f7ff fff3 	bl	b5e3c <_ZN5Print5printEc>
  return n;
}
   b5e56:	4420      	add	r0, r4
   b5e58:	bd38      	pop	{r3, r4, r5, pc}

000b5e5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5e5a:	b530      	push	{r4, r5, lr}
   b5e5c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5e5e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5e60:	2a01      	cmp	r2, #1
  *str = '\0';
   b5e62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5e66:	bf98      	it	ls
   b5e68:	220a      	movls	r2, #10
   b5e6a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5e6c:	460d      	mov	r5, r1
   b5e6e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5e72:	fb01 5312 	mls	r3, r1, r2, r5
   b5e76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e7a:	2b09      	cmp	r3, #9
   b5e7c:	bf94      	ite	ls
   b5e7e:	3330      	addls	r3, #48	; 0x30
   b5e80:	3337      	addhi	r3, #55	; 0x37
   b5e82:	b2db      	uxtb	r3, r3
  } while(n);
   b5e84:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e86:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5e8a:	d9ef      	bls.n	b5e6c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5e8c:	4621      	mov	r1, r4
   b5e8e:	f7ff ffbf 	bl	b5e10 <_ZN5Print5writeEPKc>
}
   b5e92:	b00b      	add	sp, #44	; 0x2c
   b5e94:	bd30      	pop	{r4, r5, pc}

000b5e96 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e9a:	b086      	sub	sp, #24
   b5e9c:	af00      	add	r7, sp, #0
   b5e9e:	4605      	mov	r5, r0
   b5ea0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5ea2:	1d38      	adds	r0, r7, #4
   b5ea4:	2114      	movs	r1, #20
{
   b5ea6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5ea8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5eaa:	f7ff fd57 	bl	b595c <vsnprintf>

    if (n<bufsize)
   b5eae:	2813      	cmp	r0, #19
   b5eb0:	d80e      	bhi.n	b5ed0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5eb2:	1d39      	adds	r1, r7, #4
   b5eb4:	4628      	mov	r0, r5
   b5eb6:	f7ff ffab 	bl	b5e10 <_ZN5Print5writeEPKc>
   b5eba:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5ebc:	b11e      	cbz	r6, b5ec6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5ebe:	4628      	mov	r0, r5
   b5ec0:	f7ff ffbf 	bl	b5e42 <_ZN5Print7printlnEv>
   b5ec4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5ec6:	4620      	mov	r0, r4
   b5ec8:	3718      	adds	r7, #24
   b5eca:	46bd      	mov	sp, r7
   b5ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5ed0:	f100 0308 	add.w	r3, r0, #8
   b5ed4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5ed8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5eda:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5ede:	4622      	mov	r2, r4
   b5ee0:	1c41      	adds	r1, r0, #1
   b5ee2:	683b      	ldr	r3, [r7, #0]
   b5ee4:	4668      	mov	r0, sp
   b5ee6:	f7ff fd39 	bl	b595c <vsnprintf>
  return write(str);
   b5eea:	4669      	mov	r1, sp
   b5eec:	4628      	mov	r0, r5
   b5eee:	f7ff ff8f 	bl	b5e10 <_ZN5Print5writeEPKc>
   b5ef2:	4604      	mov	r4, r0
   b5ef4:	46c5      	mov	sp, r8
   b5ef6:	e7e1      	b.n	b5ebc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5ef8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5ef8:	4b01      	ldr	r3, [pc, #4]	; (b5f00 <_GLOBAL__sub_I_RGB+0x8>)
   b5efa:	2200      	movs	r2, #0
   b5efc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5efe:	4770      	bx	lr
   b5f00:	2003e6dc 	.word	0x2003e6dc

000b5f04 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5f04:	2100      	movs	r1, #0
   b5f06:	f7ff bc05 	b.w	b5714 <hal_spi_release>

000b5f0a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5f0a:	2100      	movs	r1, #0
   b5f0c:	f7ff bbfa 	b.w	b5704 <hal_spi_acquire>

000b5f10 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5f10:	b510      	push	{r4, lr}
   b5f12:	4604      	mov	r4, r0
   b5f14:	4608      	mov	r0, r1
{
    _spi = spi;
   b5f16:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5f18:	f7ff fbd4 	bl	b56c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5f1c:	2300      	movs	r3, #0
   b5f1e:	6063      	str	r3, [r4, #4]
}
   b5f20:	4620      	mov	r0, r4
   b5f22:	bd10      	pop	{r4, pc}

000b5f24 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5f24:	b513      	push	{r0, r1, r4, lr}
   b5f26:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5f28:	7800      	ldrb	r0, [r0, #0]
   b5f2a:	f7ff ffee 	bl	b5f0a <_ZN8SPIClass4lockEv.isra.0>
   b5f2e:	b958      	cbnz	r0, b5f48 <_ZN8SPIClass5beginEv+0x24>
   b5f30:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5f32:	9001      	str	r0, [sp, #4]
   b5f34:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5f38:	f7ff fbb4 	bl	b56a4 <hal_spi_begin>
        unlock();
   b5f3c:	9801      	ldr	r0, [sp, #4]
    }
}
   b5f3e:	b002      	add	sp, #8
   b5f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5f44:	f7ff bfde 	b.w	b5f04 <_ZN8SPIClass6unlockEv.isra.0>
   b5f48:	b002      	add	sp, #8
   b5f4a:	bd10      	pop	{r4, pc}

000b5f4c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5f4c:	7800      	ldrb	r0, [r0, #0]
   b5f4e:	f7ff bfd9 	b.w	b5f04 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5f54 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5f54:	0840      	lsrs	r0, r0, #1
{
   b5f56:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5f58:	6018      	str	r0, [r3, #0]
   b5f5a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5f5c:	6818      	ldr	r0, [r3, #0]
   b5f5e:	4288      	cmp	r0, r1
   b5f60:	b2e5      	uxtb	r5, r4
   b5f62:	d906      	bls.n	b5f72 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5f64:	3401      	adds	r4, #1
   b5f66:	2c08      	cmp	r4, #8
   b5f68:	d002      	beq.n	b5f70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5f6a:	0840      	lsrs	r0, r0, #1
   b5f6c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5f6e:	e7f5      	b.n	b5f5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5f70:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5f74:	5d5b      	ldrb	r3, [r3, r5]
   b5f76:	7013      	strb	r3, [r2, #0]
}
   b5f78:	bd30      	pop	{r4, r5, pc}
   b5f7a:	bf00      	nop
   b5f7c:	000b7368 	.word	0x000b7368

000b5f80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5f84:	4606      	mov	r6, r0
   b5f86:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5f88:	7800      	ldrb	r0, [r0, #0]
{
   b5f8a:	460c      	mov	r4, r1
    CHECK(lock());
   b5f8c:	f7ff ffbd 	bl	b5f0a <_ZN8SPIClass4lockEv.isra.0>
   b5f90:	2800      	cmp	r0, #0
   b5f92:	db1b      	blt.n	b5fcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5f94:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5f96:	2214      	movs	r2, #20
   b5f98:	2100      	movs	r1, #0
   b5f9a:	a809      	add	r0, sp, #36	; 0x24
   b5f9c:	f000 fb3c 	bl	b6618 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5fa0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5fa2:	2200      	movs	r2, #0
   b5fa4:	a909      	add	r1, sp, #36	; 0x24
   b5fa6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5fa8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5fac:	f7ff fb9a 	bl	b56e4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5fb0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5fb4:	b113      	cbz	r3, b5fbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5fb6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5fba:	b155      	cbz	r5, b5fd2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5fbc:	2700      	movs	r7, #0
   b5fbe:	46b9      	mov	r9, r7
   b5fc0:	46b8      	mov	r8, r7
   b5fc2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5fc4:	7923      	ldrb	r3, [r4, #4]
   b5fc6:	b15d      	cbz	r5, b5fe0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5fc8:	b1c3      	cbz	r3, b5ffc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5fca:	2000      	movs	r0, #0
}
   b5fcc:	b00f      	add	sp, #60	; 0x3c
   b5fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5fd2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5fd6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5fda:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5fde:	e7f1      	b.n	b5fc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5fe0:	2b00      	cmp	r3, #0
   b5fe2:	d135      	bne.n	b6050 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5fe4:	68a3      	ldr	r3, [r4, #8]
   b5fe6:	4543      	cmp	r3, r8
   b5fe8:	d108      	bne.n	b5ffc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5fea:	f88d 9020 	strb.w	r9, [sp, #32]
   b5fee:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5ff2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5ff6:	89a3      	ldrh	r3, [r4, #12]
   b5ff8:	429a      	cmp	r2, r3
   b5ffa:	d0e6      	beq.n	b5fca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5ffc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5ffe:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6000:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6004:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6006:	ab04      	add	r3, sp, #16
   b6008:	f10d 020f 	add.w	r2, sp, #15
   b600c:	f7ff ffa2 	bl	b5f54 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6010:	7921      	ldrb	r1, [r4, #4]
   b6012:	b985      	cbnz	r5, b6036 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6014:	b989      	cbnz	r1, b603a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6016:	68a3      	ldr	r3, [r4, #8]
   b6018:	4543      	cmp	r3, r8
   b601a:	d30e      	bcc.n	b603a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b601c:	f88d 9020 	strb.w	r9, [sp, #32]
   b6020:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6024:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6028:	89a3      	ldrh	r3, [r4, #12]
   b602a:	429a      	cmp	r2, r3
   b602c:	d105      	bne.n	b603a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b602e:	9b04      	ldr	r3, [sp, #16]
   b6030:	4543      	cmp	r3, r8
   b6032:	d102      	bne.n	b603a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6034:	e7c9      	b.n	b5fca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6036:	2900      	cmp	r1, #0
   b6038:	d1f9      	bne.n	b602e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b603a:	2300      	movs	r3, #0
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	7b63      	ldrb	r3, [r4, #13]
   b6040:	9300      	str	r3, [sp, #0]
   b6042:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6046:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6048:	7830      	ldrb	r0, [r6, #0]
   b604a:	f7ff fb53 	bl	b56f4 <hal_spi_set_settings>
   b604e:	e7bc      	b.n	b5fca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6050:	e9cd 5500 	strd	r5, r5, [sp]
   b6054:	462b      	mov	r3, r5
   b6056:	462a      	mov	r2, r5
   b6058:	2101      	movs	r1, #1
   b605a:	e7f5      	b.n	b6048 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b605c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b605c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b605e:	7800      	ldrb	r0, [r0, #0]
   b6060:	f7ff fb28 	bl	b56b4 <hal_spi_transfer>
}
   b6064:	b2c0      	uxtb	r0, r0
   b6066:	bd08      	pop	{r3, pc}

000b6068 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6068:	4b05      	ldr	r3, [pc, #20]	; (b6080 <_GLOBAL__sub_I_System+0x18>)
   b606a:	2202      	movs	r2, #2
   b606c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b606e:	4b05      	ldr	r3, [pc, #20]	; (b6084 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6070:	4a05      	ldr	r2, [pc, #20]	; (b6088 <_GLOBAL__sub_I_System+0x20>)
   b6072:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6074:	2000      	movs	r0, #0
   b6076:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b607a:	f7ff bbcb 	b.w	b5814 <set_system_mode>
   b607e:	bf00      	nop
   b6080:	2003e6f8 	.word	0x2003e6f8
   b6084:	2003e6ec 	.word	0x2003e6ec
   b6088:	ffff0000 	.word	0xffff0000

000b608c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b608c:	4b02      	ldr	r3, [pc, #8]	; (b6098 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b608e:	681a      	ldr	r2, [r3, #0]
   b6090:	4b02      	ldr	r3, [pc, #8]	; (b609c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6092:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6094:	4770      	bx	lr
   b6096:	bf00      	nop
   b6098:	2003e544 	.word	0x2003e544
   b609c:	2003e6fc 	.word	0x2003e6fc

000b60a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b60a0:	4770      	bx	lr

000b60a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b60a2:	7441      	strb	r1, [r0, #17]
}
   b60a4:	4770      	bx	lr

000b60a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b60a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b60a8:	7c00      	ldrb	r0, [r0, #16]
   b60aa:	f7ff fb6b 	bl	b5784 <hal_usart_available_data_for_write>
}
   b60ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b60b2:	bd08      	pop	{r3, pc}

000b60b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b60b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b60b6:	7c00      	ldrb	r0, [r0, #16]
   b60b8:	f7ff fb3c 	bl	b5734 <hal_usart_available>
}
   b60bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b60c0:	bd08      	pop	{r3, pc}

000b60c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b60c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b60c4:	7c00      	ldrb	r0, [r0, #16]
   b60c6:	f7ff fb45 	bl	b5754 <hal_usart_peek>
}
   b60ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b60ce:	bd08      	pop	{r3, pc}

000b60d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b60d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b60d2:	7c00      	ldrb	r0, [r0, #16]
   b60d4:	f7ff fb36 	bl	b5744 <hal_usart_read>
}
   b60d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b60dc:	bd08      	pop	{r3, pc}

000b60de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b60de:	7c00      	ldrb	r0, [r0, #16]
   b60e0:	f7ff bb40 	b.w	b5764 <hal_usart_flush>

000b60e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b60e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b60e6:	7c45      	ldrb	r5, [r0, #17]
{
   b60e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b60ea:	b12d      	cbz	r5, b60f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b60ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b60ee:	b003      	add	sp, #12
   b60f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b60f4:	f7ff bb16 	b.w	b5724 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b60f8:	7c00      	ldrb	r0, [r0, #16]
   b60fa:	9101      	str	r1, [sp, #4]
   b60fc:	f7ff fb42 	bl	b5784 <hal_usart_available_data_for_write>
   b6100:	2800      	cmp	r0, #0
   b6102:	9901      	ldr	r1, [sp, #4]
   b6104:	dcf2      	bgt.n	b60ec <_ZN11USARTSerial5writeEh+0x8>
}
   b6106:	4628      	mov	r0, r5
   b6108:	b003      	add	sp, #12
   b610a:	bd30      	pop	{r4, r5, pc}

000b610c <_ZN11USARTSerialD0Ev>:
   b610c:	b510      	push	{r4, lr}
   b610e:	2114      	movs	r1, #20
   b6110:	4604      	mov	r4, r0
   b6112:	f7fd ffc8 	bl	b40a6 <_ZdlPvj>
   b6116:	4620      	mov	r0, r4
   b6118:	bd10      	pop	{r4, pc}
	...

000b611c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b611c:	b510      	push	{r4, lr}
   b611e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6122:	4604      	mov	r4, r0
   b6124:	4608      	mov	r0, r1
   b6126:	4611      	mov	r1, r2
   b6128:	2200      	movs	r2, #0
   b612a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b612e:	4b04      	ldr	r3, [pc, #16]	; (b6140 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6130:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6132:	2301      	movs	r3, #1
  _serial = serial;
   b6134:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6136:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6138:	f7ff fb2c 	bl	b5794 <hal_usart_init_ex>
}
   b613c:	4620      	mov	r0, r4
   b613e:	bd10      	pop	{r4, pc}
   b6140:	000b7394 	.word	0x000b7394

000b6144 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6144:	7441      	strb	r1, [r0, #17]
}
   b6146:	4770      	bx	lr

000b6148 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6148:	4770      	bx	lr

000b614a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b614a:	4770      	bx	lr

000b614c <_ZN9USBSerial4readEv>:
{
   b614c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b614e:	2100      	movs	r1, #0
   b6150:	7c00      	ldrb	r0, [r0, #16]
   b6152:	f7ff fb3f 	bl	b57d4 <HAL_USB_USART_Receive_Data>
}
   b6156:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b615a:	bd08      	pop	{r3, pc}

000b615c <_ZN9USBSerial4peekEv>:
{
   b615c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b615e:	2101      	movs	r1, #1
   b6160:	7c00      	ldrb	r0, [r0, #16]
   b6162:	f7ff fb37 	bl	b57d4 <HAL_USB_USART_Receive_Data>
}
   b6166:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b616a:	bd08      	pop	{r3, pc}

000b616c <_ZN9USBSerial17availableForWriteEv>:
{
   b616c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b616e:	7c00      	ldrb	r0, [r0, #16]
   b6170:	f7ff fb28 	bl	b57c4 <HAL_USB_USART_Available_Data_For_Write>
}
   b6174:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6178:	bd08      	pop	{r3, pc}

000b617a <_ZN9USBSerial9availableEv>:
{
   b617a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b617c:	7c00      	ldrb	r0, [r0, #16]
   b617e:	f7ff fb19 	bl	b57b4 <HAL_USB_USART_Available_Data>
}
   b6182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6186:	bd08      	pop	{r3, pc}

000b6188 <_ZN9USBSerial5writeEh>:
{
   b6188:	b513      	push	{r0, r1, r4, lr}
   b618a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b618c:	7c00      	ldrb	r0, [r0, #16]
{
   b618e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6190:	f7ff fb18 	bl	b57c4 <HAL_USB_USART_Available_Data_For_Write>
   b6194:	2800      	cmp	r0, #0
   b6196:	9901      	ldr	r1, [sp, #4]
   b6198:	dc01      	bgt.n	b619e <_ZN9USBSerial5writeEh+0x16>
   b619a:	7c60      	ldrb	r0, [r4, #17]
   b619c:	b120      	cbz	r0, b61a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b619e:	7c20      	ldrb	r0, [r4, #16]
   b61a0:	f7ff fb20 	bl	b57e4 <HAL_USB_USART_Send_Data>
   b61a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b61a8:	b002      	add	sp, #8
   b61aa:	bd10      	pop	{r4, pc}

000b61ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b61ac:	7c00      	ldrb	r0, [r0, #16]
   b61ae:	f7ff bb21 	b.w	b57f4 <HAL_USB_USART_Flush_Data>

000b61b2 <_ZN9USBSerialD0Ev>:
   b61b2:	b510      	push	{r4, lr}
   b61b4:	2114      	movs	r1, #20
   b61b6:	4604      	mov	r4, r0
   b61b8:	f7fd ff75 	bl	b40a6 <_ZdlPvj>
   b61bc:	4620      	mov	r0, r4
   b61be:	bd10      	pop	{r4, pc}

000b61c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b61c0:	b510      	push	{r4, lr}
   b61c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61c6:	4604      	mov	r4, r0
   b61c8:	4608      	mov	r0, r1
   b61ca:	2100      	movs	r1, #0
   b61cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b61d0:	4b04      	ldr	r3, [pc, #16]	; (b61e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b61d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61d4:	2301      	movs	r3, #1
  _serial = serial;
   b61d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b61da:	4611      	mov	r1, r2
   b61dc:	f7ff fae2 	bl	b57a4 <HAL_USB_USART_Init>
}
   b61e0:	4620      	mov	r0, r4
   b61e2:	bd10      	pop	{r4, pc}
   b61e4:	000b73c4 	.word	0x000b73c4

000b61e8 <_Z19acquireSerialBufferv>:
{
   b61e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b61ea:	2214      	movs	r2, #20
{
   b61ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b61ee:	2100      	movs	r1, #0
   b61f0:	f000 fa12 	bl	b6618 <memset>
}
   b61f4:	4620      	mov	r0, r4
   b61f6:	bd10      	pop	{r4, pc}

000b61f8 <_Z16_fetch_usbserialv>:
{
   b61f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b61fa:	4c0f      	ldr	r4, [pc, #60]	; (b6238 <_Z16_fetch_usbserialv+0x40>)
{
   b61fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b61fe:	a803      	add	r0, sp, #12
   b6200:	f7ff fff2 	bl	b61e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6204:	7821      	ldrb	r1, [r4, #0]
   b6206:	f3bf 8f5b 	dmb	ish
   b620a:	f011 0101 	ands.w	r1, r1, #1
   b620e:	d10f      	bne.n	b6230 <_Z16_fetch_usbserialv+0x38>
   b6210:	4620      	mov	r0, r4
   b6212:	9101      	str	r1, [sp, #4]
   b6214:	f7fd ff56 	bl	b40c4 <__cxa_guard_acquire>
   b6218:	9901      	ldr	r1, [sp, #4]
   b621a:	b148      	cbz	r0, b6230 <_Z16_fetch_usbserialv+0x38>
   b621c:	aa03      	add	r2, sp, #12
   b621e:	4807      	ldr	r0, [pc, #28]	; (b623c <_Z16_fetch_usbserialv+0x44>)
   b6220:	f7ff ffce 	bl	b61c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6224:	4620      	mov	r0, r4
   b6226:	f7fd ff52 	bl	b40ce <__cxa_guard_release>
   b622a:	4805      	ldr	r0, [pc, #20]	; (b6240 <_Z16_fetch_usbserialv+0x48>)
   b622c:	f000 f9e0 	bl	b65f0 <atexit>
	return _usbserial;
}
   b6230:	4802      	ldr	r0, [pc, #8]	; (b623c <_Z16_fetch_usbserialv+0x44>)
   b6232:	b008      	add	sp, #32
   b6234:	bd10      	pop	{r4, pc}
   b6236:	bf00      	nop
   b6238:	2003e700 	.word	0x2003e700
   b623c:	2003e704 	.word	0x2003e704
   b6240:	000b6149 	.word	0x000b6149

000b6244 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6244:	2200      	movs	r2, #0
   b6246:	6840      	ldr	r0, [r0, #4]
   b6248:	4611      	mov	r1, r2
   b624a:	f7ff bb2f 	b.w	b58ac <network_ready>

000b624e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b624e:	2200      	movs	r2, #0
   b6250:	6840      	ldr	r0, [r0, #4]
   b6252:	4611      	mov	r1, r2
   b6254:	f7ff bb4a 	b.w	b58ec <network_listening>

000b6258 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6258:	2200      	movs	r2, #0
   b625a:	6840      	ldr	r0, [r0, #4]
   b625c:	4611      	mov	r1, r2
   b625e:	f7ff bb55 	b.w	b590c <network_get_listen_timeout>

000b6262 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6262:	6840      	ldr	r0, [r0, #4]
   b6264:	2200      	movs	r2, #0
   b6266:	f7ff bb49 	b.w	b58fc <network_set_listen_timeout>

000b626a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b626a:	6840      	ldr	r0, [r0, #4]
   b626c:	2200      	movs	r2, #0
   b626e:	f081 0101 	eor.w	r1, r1, #1
   b6272:	f7ff bb33 	b.w	b58dc <network_listen>

000b6276 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6276:	2300      	movs	r3, #0
   b6278:	6840      	ldr	r0, [r0, #4]
   b627a:	461a      	mov	r2, r3
   b627c:	4619      	mov	r1, r3
   b627e:	f7ff bb25 	b.w	b58cc <network_off>

000b6282 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6282:	2300      	movs	r3, #0
   b6284:	6840      	ldr	r0, [r0, #4]
   b6286:	461a      	mov	r2, r3
   b6288:	4619      	mov	r1, r3
   b628a:	f7ff bb17 	b.w	b58bc <network_on>

000b628e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b628e:	2200      	movs	r2, #0
   b6290:	6840      	ldr	r0, [r0, #4]
   b6292:	4611      	mov	r1, r2
   b6294:	f7ff bafa 	b.w	b588c <network_connecting>

000b6298 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6298:	6840      	ldr	r0, [r0, #4]
   b629a:	2200      	movs	r2, #0
   b629c:	2102      	movs	r1, #2
   b629e:	f7ff bafd 	b.w	b589c <network_disconnect>

000b62a2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b62a2:	2300      	movs	r3, #0
   b62a4:	6840      	ldr	r0, [r0, #4]
   b62a6:	461a      	mov	r2, r3
   b62a8:	f7ff bae8 	b.w	b587c <network_connect>

000b62ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b62ac:	4b02      	ldr	r3, [pc, #8]	; (b62b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b62ae:	2204      	movs	r2, #4
   b62b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b62b2:	4a02      	ldr	r2, [pc, #8]	; (b62bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b62b4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b62b6:	4770      	bx	lr
   b62b8:	2003e718 	.word	0x2003e718
   b62bc:	000b73f4 	.word	0x000b73f4

000b62c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b62c0:	4b01      	ldr	r3, [pc, #4]	; (b62c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b62c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b62c4:	4770      	bx	lr
   b62c6:	bf00      	nop
   b62c8:	2003e548 	.word	0x2003e548

000b62cc <serialEventRun>:
{
   b62cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b62ce:	4b0b      	ldr	r3, [pc, #44]	; (b62fc <serialEventRun+0x30>)
   b62d0:	b143      	cbz	r3, b62e4 <serialEventRun+0x18>
   b62d2:	f7ff ff91 	bl	b61f8 <_Z16_fetch_usbserialv>
   b62d6:	6803      	ldr	r3, [r0, #0]
   b62d8:	691b      	ldr	r3, [r3, #16]
   b62da:	4798      	blx	r3
   b62dc:	2800      	cmp	r0, #0
   b62de:	dd01      	ble.n	b62e4 <serialEventRun+0x18>
        serialEvent();
   b62e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b62e4:	4b06      	ldr	r3, [pc, #24]	; (b6300 <serialEventRun+0x34>)
   b62e6:	b143      	cbz	r3, b62fa <serialEventRun+0x2e>
   b62e8:	f000 f95c 	bl	b65a4 <_Z22__fetch_global_Serial1v>
   b62ec:	6803      	ldr	r3, [r0, #0]
   b62ee:	691b      	ldr	r3, [r3, #16]
   b62f0:	4798      	blx	r3
   b62f2:	2800      	cmp	r0, #0
   b62f4:	dd01      	ble.n	b62fa <serialEventRun+0x2e>
        serialEvent1();
   b62f6:	f3af 8000 	nop.w
}
   b62fa:	bd08      	pop	{r3, pc}
	...

000b6304 <_post_loop>:
{
   b6304:	b508      	push	{r3, lr}
	serialEventRun();
   b6306:	f7ff ffe1 	bl	b62cc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b630a:	f7ff f923 	bl	b5554 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b630e:	4b01      	ldr	r3, [pc, #4]	; (b6314 <_post_loop+0x10>)
   b6310:	6018      	str	r0, [r3, #0]
}
   b6312:	bd08      	pop	{r3, pc}
   b6314:	2003e728 	.word	0x2003e728

000b6318 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6318:	4805      	ldr	r0, [pc, #20]	; (b6330 <_Z33system_initialize_user_backup_ramv+0x18>)
   b631a:	4a06      	ldr	r2, [pc, #24]	; (b6334 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b631c:	4906      	ldr	r1, [pc, #24]	; (b6338 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b631e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6320:	1a12      	subs	r2, r2, r0
   b6322:	f000 f96b 	bl	b65fc <memcpy>
    __backup_sram_signature = signature;
   b6326:	4b05      	ldr	r3, [pc, #20]	; (b633c <_Z33system_initialize_user_backup_ramv+0x24>)
   b6328:	4a05      	ldr	r2, [pc, #20]	; (b6340 <_Z33system_initialize_user_backup_ramv+0x28>)
   b632a:	601a      	str	r2, [r3, #0]
}
   b632c:	bd08      	pop	{r3, pc}
   b632e:	bf00      	nop
   b6330:	2003f400 	.word	0x2003f400
   b6334:	2003f404 	.word	0x2003f404
   b6338:	000b7554 	.word	0x000b7554
   b633c:	2003f400 	.word	0x2003f400
   b6340:	9a271c1e 	.word	0x9a271c1e

000b6344 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6344:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6346:	2300      	movs	r3, #0
   b6348:	9300      	str	r3, [sp, #0]
   b634a:	461a      	mov	r2, r3
   b634c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6350:	f7ff fa82 	bl	b5858 <system_ctrl_set_result>
}
   b6354:	b003      	add	sp, #12
   b6356:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b635c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b635c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b635e:	8843      	ldrh	r3, [r0, #2]
   b6360:	2b0a      	cmp	r3, #10
   b6362:	d008      	beq.n	b6376 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6364:	2b50      	cmp	r3, #80	; 0x50
   b6366:	d10b      	bne.n	b6380 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6368:	4b09      	ldr	r3, [pc, #36]	; (b6390 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b636a:	681b      	ldr	r3, [r3, #0]
   b636c:	b14b      	cbz	r3, b6382 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b636e:	b003      	add	sp, #12
   b6370:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6374:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6376:	f7ff ffe5 	bl	b6344 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b637a:	b003      	add	sp, #12
   b637c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6380:	2300      	movs	r3, #0
   b6382:	9300      	str	r3, [sp, #0]
   b6384:	461a      	mov	r2, r3
   b6386:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b638a:	f7ff fa65 	bl	b5858 <system_ctrl_set_result>
}
   b638e:	e7f4      	b.n	b637a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6390:	2003e724 	.word	0x2003e724

000b6394 <module_user_init_hook>:
{
   b6394:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6396:	4812      	ldr	r0, [pc, #72]	; (b63e0 <module_user_init_hook+0x4c>)
   b6398:	2100      	movs	r1, #0
   b639a:	f7ff faef 	bl	b597c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b639e:	4b11      	ldr	r3, [pc, #68]	; (b63e4 <module_user_init_hook+0x50>)
   b63a0:	681a      	ldr	r2, [r3, #0]
   b63a2:	4b11      	ldr	r3, [pc, #68]	; (b63e8 <module_user_init_hook+0x54>)
   b63a4:	429a      	cmp	r2, r3
   b63a6:	4b11      	ldr	r3, [pc, #68]	; (b63ec <module_user_init_hook+0x58>)
   b63a8:	bf0c      	ite	eq
   b63aa:	2201      	moveq	r2, #1
   b63ac:	2200      	movne	r2, #0
   b63ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b63b0:	d001      	beq.n	b63b6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b63b2:	f7ff ffb1 	bl	b6318 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b63b6:	f7ff f8bd 	bl	b5534 <HAL_RNG_GetRandomNumber>
   b63ba:	4604      	mov	r4, r0
    srand(seed);
   b63bc:	f000 f934 	bl	b6628 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b63c0:	4b0b      	ldr	r3, [pc, #44]	; (b63f0 <module_user_init_hook+0x5c>)
   b63c2:	b113      	cbz	r3, b63ca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b63c4:	4620      	mov	r0, r4
   b63c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b63ca:	2100      	movs	r1, #0
   b63cc:	4808      	ldr	r0, [pc, #32]	; (b63f0 <module_user_init_hook+0x5c>)
   b63ce:	f7ff fa4d 	bl	b586c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b63d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b63d6:	4807      	ldr	r0, [pc, #28]	; (b63f4 <module_user_init_hook+0x60>)
   b63d8:	2100      	movs	r1, #0
   b63da:	f7ff ba33 	b.w	b5844 <system_ctrl_set_app_request_handler>
   b63de:	bf00      	nop
   b63e0:	000b62c1 	.word	0x000b62c1
   b63e4:	2003f400 	.word	0x2003f400
   b63e8:	9a271c1e 	.word	0x9a271c1e
   b63ec:	2003e720 	.word	0x2003e720
   b63f0:	00000000 	.word	0x00000000
   b63f4:	000b635d 	.word	0x000b635d

000b63f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b63f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b63fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b63fc:	d902      	bls.n	b6404 <pinAvailable+0xc>
    return false;
   b63fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6400:	b002      	add	sp, #8
   b6402:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6404:	f1a0 030b 	sub.w	r3, r0, #11
   b6408:	2b02      	cmp	r3, #2
   b640a:	d81a      	bhi.n	b6442 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b640c:	4c17      	ldr	r4, [pc, #92]	; (b646c <pinAvailable+0x74>)
   b640e:	7821      	ldrb	r1, [r4, #0]
   b6410:	f3bf 8f5b 	dmb	ish
   b6414:	f011 0101 	ands.w	r1, r1, #1
   b6418:	d10b      	bne.n	b6432 <pinAvailable+0x3a>
   b641a:	4620      	mov	r0, r4
   b641c:	9101      	str	r1, [sp, #4]
   b641e:	f7fd fe51 	bl	b40c4 <__cxa_guard_acquire>
   b6422:	9901      	ldr	r1, [sp, #4]
   b6424:	b128      	cbz	r0, b6432 <pinAvailable+0x3a>
   b6426:	4812      	ldr	r0, [pc, #72]	; (b6470 <pinAvailable+0x78>)
   b6428:	f7ff fd72 	bl	b5f10 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b642c:	4620      	mov	r0, r4
   b642e:	f7fd fe4e 	bl	b40ce <__cxa_guard_release>
   b6432:	4b0f      	ldr	r3, [pc, #60]	; (b6470 <pinAvailable+0x78>)
   b6434:	7818      	ldrb	r0, [r3, #0]
   b6436:	f7ff f94d 	bl	b56d4 <hal_spi_is_enabled>
   b643a:	2800      	cmp	r0, #0
   b643c:	d1df      	bne.n	b63fe <pinAvailable+0x6>
  return true; // 'pin' is available
   b643e:	2001      	movs	r0, #1
   b6440:	e7de      	b.n	b6400 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6442:	2801      	cmp	r0, #1
   b6444:	d809      	bhi.n	b645a <pinAvailable+0x62>
   b6446:	f000 f86d 	bl	b6524 <_Z19__fetch_global_Wirev>
   b644a:	2100      	movs	r1, #0
   b644c:	7c00      	ldrb	r0, [r0, #16]
   b644e:	f7ff f901 	bl	b5654 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6452:	f080 0001 	eor.w	r0, r0, #1
   b6456:	b2c0      	uxtb	r0, r0
   b6458:	e7d2      	b.n	b6400 <pinAvailable+0x8>
   b645a:	3809      	subs	r0, #9
   b645c:	2801      	cmp	r0, #1
   b645e:	d8ee      	bhi.n	b643e <pinAvailable+0x46>
   b6460:	f000 f8a0 	bl	b65a4 <_Z22__fetch_global_Serial1v>
   b6464:	7c00      	ldrb	r0, [r0, #16]
   b6466:	f7ff f985 	bl	b5774 <hal_usart_is_enabled>
   b646a:	e7f2      	b.n	b6452 <pinAvailable+0x5a>
   b646c:	2003e628 	.word	0x2003e628
   b6470:	2003e62c 	.word	0x2003e62c

000b6474 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6474:	2823      	cmp	r0, #35	; 0x23
{
   b6476:	b538      	push	{r3, r4, r5, lr}
   b6478:	4604      	mov	r4, r0
   b647a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b647c:	d80a      	bhi.n	b6494 <pinMode+0x20>
   b647e:	29ff      	cmp	r1, #255	; 0xff
   b6480:	d008      	beq.n	b6494 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6482:	f7ff ffb9 	bl	b63f8 <pinAvailable>
   b6486:	b128      	cbz	r0, b6494 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b6488:	4629      	mov	r1, r5
   b648a:	4620      	mov	r0, r4
}
   b648c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b6490:	f7ff b868 	b.w	b5564 <hal_gpio_mode>
}
   b6494:	bd38      	pop	{r3, r4, r5, pc}

000b6496 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b6496:	b538      	push	{r3, r4, r5, lr}
   b6498:	4604      	mov	r4, r0
   b649a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b649c:	f7ff f86a 	bl	b5574 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b64a0:	28ff      	cmp	r0, #255	; 0xff
   b64a2:	d010      	beq.n	b64c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b64a4:	2806      	cmp	r0, #6
   b64a6:	d804      	bhi.n	b64b2 <digitalWrite+0x1c>
   b64a8:	234d      	movs	r3, #77	; 0x4d
   b64aa:	fa23 f000 	lsr.w	r0, r3, r0
   b64ae:	07c3      	lsls	r3, r0, #31
   b64b0:	d409      	bmi.n	b64c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b64b2:	4620      	mov	r0, r4
   b64b4:	f7ff ffa0 	bl	b63f8 <pinAvailable>
   b64b8:	b128      	cbz	r0, b64c6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b64ba:	4629      	mov	r1, r5
   b64bc:	4620      	mov	r0, r4
}
   b64be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b64c2:	f7ff b85f 	b.w	b5584 <hal_gpio_write>
}
   b64c6:	bd38      	pop	{r3, r4, r5, pc}

000b64c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b64c8:	b510      	push	{r4, lr}
   b64ca:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b64cc:	f7ff f852 	bl	b5574 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b64d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b64d2:	b2db      	uxtb	r3, r3
   b64d4:	2b01      	cmp	r3, #1
   b64d6:	d908      	bls.n	b64ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff ff8d 	bl	b63f8 <pinAvailable>
   b64de:	b120      	cbz	r0, b64ea <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b64e0:	4620      	mov	r0, r4
}
   b64e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b64e6:	f7ff b855 	b.w	b5594 <hal_gpio_read>
}
   b64ea:	2000      	movs	r0, #0
   b64ec:	bd10      	pop	{r4, pc}

000b64ee <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b64ee:	4770      	bx	lr

000b64f0 <_Z17acquireWireBufferv>:
{
   b64f0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b64f2:	4b0a      	ldr	r3, [pc, #40]	; (b651c <_Z17acquireWireBufferv+0x2c>)
   b64f4:	6003      	str	r3, [r0, #0]
   b64f6:	2301      	movs	r3, #1
{
   b64f8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b64fa:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b64fc:	4908      	ldr	r1, [pc, #32]	; (b6520 <_Z17acquireWireBufferv+0x30>)
   b64fe:	2020      	movs	r0, #32
   b6500:	f000 f874 	bl	b65ec <_ZnajRKSt9nothrow_t>
	};
   b6504:	2520      	movs	r5, #32
   b6506:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6508:	4905      	ldr	r1, [pc, #20]	; (b6520 <_Z17acquireWireBufferv+0x30>)
	};
   b650a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b650c:	4628      	mov	r0, r5
   b650e:	f000 f86d 	bl	b65ec <_ZnajRKSt9nothrow_t>
	};
   b6512:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6516:	4620      	mov	r0, r4
   b6518:	bd38      	pop	{r3, r4, r5, pc}
   b651a:	bf00      	nop
   b651c:	00010018 	.word	0x00010018
   b6520:	000b7428 	.word	0x000b7428

000b6524 <_Z19__fetch_global_Wirev>:
{
   b6524:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6526:	4d0e      	ldr	r5, [pc, #56]	; (b6560 <_Z19__fetch_global_Wirev+0x3c>)
   b6528:	7829      	ldrb	r1, [r5, #0]
   b652a:	f3bf 8f5b 	dmb	ish
   b652e:	f011 0401 	ands.w	r4, r1, #1
{
   b6532:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6534:	d111      	bne.n	b655a <_Z19__fetch_global_Wirev+0x36>
   b6536:	4628      	mov	r0, r5
   b6538:	f7fd fdc4 	bl	b40c4 <__cxa_guard_acquire>
   b653c:	b168      	cbz	r0, b655a <_Z19__fetch_global_Wirev+0x36>
   b653e:	4668      	mov	r0, sp
   b6540:	f7ff ffd6 	bl	b64f0 <_Z17acquireWireBufferv>
   b6544:	466a      	mov	r2, sp
   b6546:	4621      	mov	r1, r4
   b6548:	4806      	ldr	r0, [pc, #24]	; (b6564 <_Z19__fetch_global_Wirev+0x40>)
   b654a:	f7ff fa9d 	bl	b5a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b654e:	4628      	mov	r0, r5
   b6550:	f7fd fdbd 	bl	b40ce <__cxa_guard_release>
   b6554:	4804      	ldr	r0, [pc, #16]	; (b6568 <_Z19__fetch_global_Wirev+0x44>)
   b6556:	f000 f84b 	bl	b65f0 <atexit>
	return wire;
}
   b655a:	4802      	ldr	r0, [pc, #8]	; (b6564 <_Z19__fetch_global_Wirev+0x40>)
   b655c:	b007      	add	sp, #28
   b655e:	bd30      	pop	{r4, r5, pc}
   b6560:	2003e72c 	.word	0x2003e72c
   b6564:	2003e730 	.word	0x2003e730
   b6568:	000b64ef 	.word	0x000b64ef

000b656c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b656c:	4770      	bx	lr
	...

000b6570 <_Z20acquireSerial1Bufferv>:
{
   b6570:	b538      	push	{r3, r4, r5, lr}
   b6572:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6574:	2514      	movs	r5, #20
   b6576:	462a      	mov	r2, r5
   b6578:	2100      	movs	r1, #0
   b657a:	f000 f84d 	bl	b6618 <memset>
   b657e:	8025      	strh	r5, [r4, #0]
   b6580:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6582:	4907      	ldr	r1, [pc, #28]	; (b65a0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6584:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6586:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6588:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b658a:	f000 f82f 	bl	b65ec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b658e:	4904      	ldr	r1, [pc, #16]	; (b65a0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6590:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6592:	4628      	mov	r0, r5
   b6594:	f000 f82a 	bl	b65ec <_ZnajRKSt9nothrow_t>
    };
   b6598:	60e0      	str	r0, [r4, #12]
}
   b659a:	4620      	mov	r0, r4
   b659c:	bd38      	pop	{r3, r4, r5, pc}
   b659e:	bf00      	nop
   b65a0:	000b7428 	.word	0x000b7428

000b65a4 <_Z22__fetch_global_Serial1v>:
{
   b65a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b65a6:	4d0e      	ldr	r5, [pc, #56]	; (b65e0 <_Z22__fetch_global_Serial1v+0x3c>)
   b65a8:	7829      	ldrb	r1, [r5, #0]
   b65aa:	f3bf 8f5b 	dmb	ish
   b65ae:	f011 0401 	ands.w	r4, r1, #1
{
   b65b2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b65b4:	d111      	bne.n	b65da <_Z22__fetch_global_Serial1v+0x36>
   b65b6:	4628      	mov	r0, r5
   b65b8:	f7fd fd84 	bl	b40c4 <__cxa_guard_acquire>
   b65bc:	b168      	cbz	r0, b65da <_Z22__fetch_global_Serial1v+0x36>
   b65be:	a801      	add	r0, sp, #4
   b65c0:	f7ff ffd6 	bl	b6570 <_Z20acquireSerial1Bufferv>
   b65c4:	aa01      	add	r2, sp, #4
   b65c6:	4621      	mov	r1, r4
   b65c8:	4806      	ldr	r0, [pc, #24]	; (b65e4 <_Z22__fetch_global_Serial1v+0x40>)
   b65ca:	f7ff fda7 	bl	b611c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b65ce:	4628      	mov	r0, r5
   b65d0:	f7fd fd7d 	bl	b40ce <__cxa_guard_release>
   b65d4:	4804      	ldr	r0, [pc, #16]	; (b65e8 <_Z22__fetch_global_Serial1v+0x44>)
   b65d6:	f000 f80b 	bl	b65f0 <atexit>
    return serial1;
}
   b65da:	4802      	ldr	r0, [pc, #8]	; (b65e4 <_Z22__fetch_global_Serial1v+0x40>)
   b65dc:	b007      	add	sp, #28
   b65de:	bd30      	pop	{r4, r5, pc}
   b65e0:	2003e744 	.word	0x2003e744
   b65e4:	2003e748 	.word	0x2003e748
   b65e8:	000b656d 	.word	0x000b656d

000b65ec <_ZnajRKSt9nothrow_t>:
   b65ec:	f7fd bd59 	b.w	b40a2 <_Znaj>

000b65f0 <atexit>:
   b65f0:	2300      	movs	r3, #0
   b65f2:	4601      	mov	r1, r0
   b65f4:	461a      	mov	r2, r3
   b65f6:	4618      	mov	r0, r3
   b65f8:	f000 b844 	b.w	b6684 <__register_exitproc>

000b65fc <memcpy>:
   b65fc:	440a      	add	r2, r1
   b65fe:	4291      	cmp	r1, r2
   b6600:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6604:	d100      	bne.n	b6608 <memcpy+0xc>
   b6606:	4770      	bx	lr
   b6608:	b510      	push	{r4, lr}
   b660a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b660e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6612:	4291      	cmp	r1, r2
   b6614:	d1f9      	bne.n	b660a <memcpy+0xe>
   b6616:	bd10      	pop	{r4, pc}

000b6618 <memset>:
   b6618:	4402      	add	r2, r0
   b661a:	4603      	mov	r3, r0
   b661c:	4293      	cmp	r3, r2
   b661e:	d100      	bne.n	b6622 <memset+0xa>
   b6620:	4770      	bx	lr
   b6622:	f803 1b01 	strb.w	r1, [r3], #1
   b6626:	e7f9      	b.n	b661c <memset+0x4>

000b6628 <srand>:
   b6628:	b538      	push	{r3, r4, r5, lr}
   b662a:	4b10      	ldr	r3, [pc, #64]	; (b666c <srand+0x44>)
   b662c:	681d      	ldr	r5, [r3, #0]
   b662e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6630:	4604      	mov	r4, r0
   b6632:	b9b3      	cbnz	r3, b6662 <srand+0x3a>
   b6634:	2018      	movs	r0, #24
   b6636:	f7ff f981 	bl	b593c <malloc>
   b663a:	4602      	mov	r2, r0
   b663c:	63a8      	str	r0, [r5, #56]	; 0x38
   b663e:	b920      	cbnz	r0, b664a <srand+0x22>
   b6640:	4b0b      	ldr	r3, [pc, #44]	; (b6670 <srand+0x48>)
   b6642:	480c      	ldr	r0, [pc, #48]	; (b6674 <srand+0x4c>)
   b6644:	2142      	movs	r1, #66	; 0x42
   b6646:	f7ff f991 	bl	b596c <__assert_func>
   b664a:	490b      	ldr	r1, [pc, #44]	; (b6678 <srand+0x50>)
   b664c:	4b0b      	ldr	r3, [pc, #44]	; (b667c <srand+0x54>)
   b664e:	e9c0 1300 	strd	r1, r3, [r0]
   b6652:	4b0b      	ldr	r3, [pc, #44]	; (b6680 <srand+0x58>)
   b6654:	6083      	str	r3, [r0, #8]
   b6656:	230b      	movs	r3, #11
   b6658:	8183      	strh	r3, [r0, #12]
   b665a:	2100      	movs	r1, #0
   b665c:	2001      	movs	r0, #1
   b665e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6662:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6664:	2200      	movs	r2, #0
   b6666:	611c      	str	r4, [r3, #16]
   b6668:	615a      	str	r2, [r3, #20]
   b666a:	bd38      	pop	{r3, r4, r5, pc}
   b666c:	2003e548 	.word	0x2003e548
   b6670:	000b7429 	.word	0x000b7429
   b6674:	000b7440 	.word	0x000b7440
   b6678:	abcd330e 	.word	0xabcd330e
   b667c:	e66d1234 	.word	0xe66d1234
   b6680:	0005deec 	.word	0x0005deec

000b6684 <__register_exitproc>:
   b6684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6688:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6744 <__register_exitproc+0xc0>
   b668c:	4606      	mov	r6, r0
   b668e:	f8d8 0000 	ldr.w	r0, [r8]
   b6692:	461f      	mov	r7, r3
   b6694:	460d      	mov	r5, r1
   b6696:	4691      	mov	r9, r2
   b6698:	f000 f856 	bl	b6748 <__retarget_lock_acquire_recursive>
   b669c:	4b25      	ldr	r3, [pc, #148]	; (b6734 <__register_exitproc+0xb0>)
   b669e:	681c      	ldr	r4, [r3, #0]
   b66a0:	b934      	cbnz	r4, b66b0 <__register_exitproc+0x2c>
   b66a2:	4c25      	ldr	r4, [pc, #148]	; (b6738 <__register_exitproc+0xb4>)
   b66a4:	601c      	str	r4, [r3, #0]
   b66a6:	4b25      	ldr	r3, [pc, #148]	; (b673c <__register_exitproc+0xb8>)
   b66a8:	b113      	cbz	r3, b66b0 <__register_exitproc+0x2c>
   b66aa:	681b      	ldr	r3, [r3, #0]
   b66ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b66b0:	6863      	ldr	r3, [r4, #4]
   b66b2:	2b1f      	cmp	r3, #31
   b66b4:	dd07      	ble.n	b66c6 <__register_exitproc+0x42>
   b66b6:	f8d8 0000 	ldr.w	r0, [r8]
   b66ba:	f000 f847 	bl	b674c <__retarget_lock_release_recursive>
   b66be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b66c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b66c6:	b34e      	cbz	r6, b671c <__register_exitproc+0x98>
   b66c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b66cc:	b988      	cbnz	r0, b66f2 <__register_exitproc+0x6e>
   b66ce:	4b1c      	ldr	r3, [pc, #112]	; (b6740 <__register_exitproc+0xbc>)
   b66d0:	b923      	cbnz	r3, b66dc <__register_exitproc+0x58>
   b66d2:	f8d8 0000 	ldr.w	r0, [r8]
   b66d6:	f000 f838 	bl	b674a <__retarget_lock_release>
   b66da:	e7f0      	b.n	b66be <__register_exitproc+0x3a>
   b66dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b66e0:	f7ff f92c 	bl	b593c <malloc>
   b66e4:	2800      	cmp	r0, #0
   b66e6:	d0f4      	beq.n	b66d2 <__register_exitproc+0x4e>
   b66e8:	2300      	movs	r3, #0
   b66ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b66ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b66f2:	6863      	ldr	r3, [r4, #4]
   b66f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b66f8:	2201      	movs	r2, #1
   b66fa:	409a      	lsls	r2, r3
   b66fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6700:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6704:	4313      	orrs	r3, r2
   b6706:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b670a:	2e02      	cmp	r6, #2
   b670c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6710:	bf02      	ittt	eq
   b6712:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6716:	4313      	orreq	r3, r2
   b6718:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b671c:	6863      	ldr	r3, [r4, #4]
   b671e:	f8d8 0000 	ldr.w	r0, [r8]
   b6722:	1c5a      	adds	r2, r3, #1
   b6724:	3302      	adds	r3, #2
   b6726:	6062      	str	r2, [r4, #4]
   b6728:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b672c:	f000 f80e 	bl	b674c <__retarget_lock_release_recursive>
   b6730:	2000      	movs	r0, #0
   b6732:	e7c6      	b.n	b66c2 <__register_exitproc+0x3e>
   b6734:	2003e7e8 	.word	0x2003e7e8
   b6738:	2003e75c 	.word	0x2003e75c
   b673c:	00000000 	.word	0x00000000
   b6740:	000b593d 	.word	0x000b593d
   b6744:	2003e5ac 	.word	0x2003e5ac

000b6748 <__retarget_lock_acquire_recursive>:
   b6748:	4770      	bx	lr

000b674a <__retarget_lock_release>:
   b674a:	4770      	bx	lr

000b674c <__retarget_lock_release_recursive>:
   b674c:	4770      	bx	lr

000b674e <link_code_end>:
	...

000b6750 <dynalib_user>:
   b6750:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b6760:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6770:	7620 7269 7574 6c61                           virtual.

000b6779 <_ZL4font>:
   b6779:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6789:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6799:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b67a9:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b67b9:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b67c9:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b67d9:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b67e9:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b67f9:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b6809:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b6819:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6829:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6839:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6849:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6859:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6869:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b6879:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b6889:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b6899:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b68a9:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b68b9:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b68c9:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b68d9:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b68e9:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b68f9:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b6909:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b6919:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b6929:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b6939:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b6949:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b6959:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b6969:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b6979:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b6989:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b6999:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b69a9:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b69b9:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b69c9:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b69d9:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b69e9:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b69f9:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b6a09:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b6a19:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b6a29:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b6a39:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b6a49:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b6a59:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b6a69:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b6a79:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b6a89:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b6a99:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b6aa9:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b6ab9:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b6ac9:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b6ad9:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b6ae9:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b6af9:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b6b09:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b6b19:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b6b29:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b6b39:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b6b49:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b6b59:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b6b69:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b6b79:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b6b89:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b6b99:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b6ba9:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b6bb9:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b6bc9:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b6bd9:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b6be9:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b6bf9:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b6c09:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b6c19:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b6c29:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b6c39:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b6c49:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b6c59:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b6c69:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   b6c79:	0000                                         ...

000b6c7c <_ZTV12Adafruit_GFX>:
	...
   b6c8c:	48c9 000b 5de5 000b 40ad 000b 42cf 000b     .H...]...@...B..
   b6c9c:	42d1 000b 4303 000b 42df 000b 42f1 000b     .B...C...B...B..
   b6cac:	4211 000b 42cf 000b 44fb 000b 44f9 000b     .B...B...D...D..
   b6cbc:	431b 000b 4359 000b 4393 000b 43d9 000b     .C..YC...C...C..
   b6ccc:	43f5 000b 4479 000b 6564 6166 6c75 2074     .C..yD..default 
   b6cdc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b6cec:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b6cfc:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b6d0c:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b6d18 <_ZTVN8particle11SPISettingsE>:
	...
   b6d20:	4a05 000b 49d7 000b 49d9 000b               .J...I...I..

000b6d2c <_ZL12splash1_data>:
   b6d2c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b6d3c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b6d4c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b6d5c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b6d6c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b6d7c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b6d94:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b6da4:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b6db4:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b6dc4:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b6dd4:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b6de4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b6df4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b6e04:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b6e14:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b6e24:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b6e34:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b6e44:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b6e54:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b6e64:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b6e74:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b6e84:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b6e94:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b6ea4:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b6ebc:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b6ed4:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b6ee4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b6ef4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b6f04:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b6f14:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b6f24:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b6f34:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b6f44:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b6f54:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b6f64:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b6f74:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b6f84:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b6f94:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b6fa4:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b6fb4:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b6fc4:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b6fd4:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b6fe4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b6fec <_ZL12splash2_data>:
   b6fec:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b6ffc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b700c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b7028:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b7038:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b7048:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b7058:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b7068:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b7078:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b7088:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b7098:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b70a8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b70b8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b70c8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b70d8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b70e8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b70f8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b7108:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b7118:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b7128:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b7138:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b7148:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b7158:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b7168:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b7180:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b7190:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b71a0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b71b0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b71c0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b71cc <_ZTV16Adafruit_SSD1306>:
	...
   b71d4:	4a59 000b 4a71 000b 48c9 000b 5de5 000b     YJ..qJ...H...]..
   b71e4:	4a85 000b 42cf 000b 42d1 000b 4303 000b     .J...B...B...C..
   b71f4:	42df 000b 42f1 000b 4211 000b 42cf 000b     .B...B...B...B..
   b7204:	44fb 000b 4c23 000b 51cb 000b 517d 000b     .D..#L...Q..}Q..
   b7214:	4393 000b 43d9 000b 43f5 000b 4479 000b     .C...C...C..yD..

000b7224 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b7224:	8000 e0c0 f8f0 fefc                         ........

000b722c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b722c:	0100 0703 1f0f 7f3f                         ......?.

000b7234 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b7234:	d5ae a880                                   ....

000b7238 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b7238:	00d3 8d40                                   ..@.

000b723c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b723c:	0020 c8a1                                    ...

000b7240 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b7240:	40db a6a4 af2e                              .@....

000b7246 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b7246:	02da 8f81                                   ....

000b724a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b724a:	12da                                         ...

000b724d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b724d:	02da                                         ...

000b7250 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b7250:	0022 21ff 0000 0000                         "..!....

000b7258 <_ZTV16OledWingAdafruit>:
	...
   b7260:	53f1 000b 5411 000b 48c9 000b 5de5 000b     .S...T...H...]..
   b7270:	4a85 000b 42cf 000b 42d1 000b 4303 000b     .J...B...B...C..
   b7280:	42df 000b 42f1 000b 4211 000b 42cf 000b     .B...B...B...B..
   b7290:	44fb 000b 4c23 000b 51cb 000b 517d 000b     .D..#L...Q..}Q..
   b72a0:	4393 000b 43d9 000b 43f5 000b 4479 000b     .C...C...C..yD..

000b72b0 <_ZTVN5spark13EthernetClassE>:
	...
   b72b8:	5a13 000b 5a09 000b 59ff 000b 59f5 000b     .Z...Z...Y...Y..
   b72c8:	59e9 000b 59dd 000b 5cc1 000b 5cc9 000b     .Y...Y...\...\..
   b72d8:	59d1 000b 59c9 000b 59bf 000b 59b5 000b     .Y...Y...Y...Y..
   b72e8:	5cf9 000b                                   .\..

000b72ec <_ZTV7TwoWire>:
	...
   b72f4:	5a31 000b 5a7b 000b 5a53 000b 5a33 000b     1Z..{Z..SZ..3Z..
   b7304:	5a5b 000b 5a63 000b 5a6b 000b 5a73 000b     [Z..cZ..kZ..sZ..

000b7314 <_ZTV9IPAddress>:
	...
   b731c:	5b91 000b 5b81 000b 5b83 000b 7061 0070     .[...[...[..app.

000b732c <_ZTVN5spark12NetworkClassE>:
	...
   b7334:	5c81 000b 5c8b 000b 5c95 000b 5c9f 000b     .\...\...\...\..
   b7344:	5ca9 000b 5cb5 000b 5cc1 000b 5cc9 000b     .\...\...\...\..
   b7354:	5cd1 000b 5cdd 000b 5ce5 000b 5cef 000b     .\...\...\...\..
   b7364:	5cf9 000b                                   .\..

000b7368 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7368:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b7378:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7388:	6d69 0065                                   ime.

000b738c <_ZTV11USARTSerial>:
	...
   b7394:	60a1 000b 610d 000b 60e5 000b 5de5 000b     .`...a...`...]..
   b73a4:	60b5 000b 60d1 000b 60c3 000b 60df 000b     .`...`...`...`..
   b73b4:	60a3 000b 60a7 000b                         .`...`..

000b73bc <_ZTV9USBSerial>:
	...
   b73c4:	614b 000b 61b3 000b 6189 000b 5de5 000b     Ka...a...a...]..
   b73d4:	617b 000b 614d 000b 615d 000b 61ad 000b     {a..Ma..]a...a..
   b73e4:	616d 000b 6145 000b                         ma..Ea..

000b73ec <_ZTVN5spark9WiFiClassE>:
	...
   b73f4:	62a3 000b 6299 000b 628f 000b 6245 000b     .b...b...b..Eb..
   b7404:	6283 000b 6277 000b 5cc1 000b 5cc9 000b     .b..wb...\...\..
   b7414:	626b 000b 6263 000b 6259 000b 624f 000b     kb..cb..Yb..Ob..
   b7424:	5cf9 000b                                   .\..

000b7428 <_ZSt7nothrow>:
   b7428:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7438:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7448:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7458:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7468:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7478:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7488:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7499 <link_const_data_end>:
   b7499:	00          	.byte	0x00
	...

000b749c <link_constructors_location>:
   b749c:	000b41f5 	.word	0x000b41f5
   b74a0:	000b59a5 	.word	0x000b59a5
   b74a4:	000b5a1d 	.word	0x000b5a1d
   b74a8:	000b5c71 	.word	0x000b5c71
   b74ac:	000b5dd1 	.word	0x000b5dd1
   b74b0:	000b5ef9 	.word	0x000b5ef9
   b74b4:	000b6069 	.word	0x000b6069
   b74b8:	000b608d 	.word	0x000b608d
   b74bc:	000b62ad 	.word	0x000b62ad
